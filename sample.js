// Generated by CoffeeScript 1.12.6
(function() {
  var Adapter, EnterMessage, LeaveMessage, Robot, Sample, TextMessage, TopicMessage, User, prequire, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  try {
    ref = require('hubot'), Robot = ref.Robot, Adapter = ref.Adapter, EnterMessage = ref.EnterMessage, LeaveMessage = ref.LeaveMessage, TopicMessage = ref.TopicMessage, TextMessage = ref.TextMessage, User = ref.User;
  } catch (error) {
    prequire = require('parent-require');
    ref1 = prequire('hubot'), Robot = ref1.Robot, Adapter = ref1.Adapter, EnterMessage = ref1.EnterMessage, LeaveMessage = ref1.LeaveMessage, TopicMessage = ref1.TopicMessage, TextMessage = ref1.TextMessage, User = ref1.User;
  }

  Sample = (function(superClass) {
    extend(Sample, superClass);

    function Sample() {
      Sample.__super__.constructor.apply(this, arguments);
      this.robot.logger.info("Constructor");
    }

    Sample.prototype.send = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.robot.logger.info("Send");
    };

    Sample.prototype.reply = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.robot.logger.info("Reply");
    };

    Sample.prototype.run = function() {
      var message, user;
      this.robot.logger.info("Run");
      this.emit("connected");
      user = new User(1001, {
        name: 'Sample User'
      });
      message = new TextMessage(user, 'Some Sample Message', 'MSG-001');
      return this.robot.receive(message);
    };

    return Sample;

  })(Adapter);

  exports.use = function(robot) {
    return new Sample(robot);
  };

}).call(this);
