#!/usr/bin/env coffee
# vim:ft=coffee ts=2 sw=2 et :
# -*- mode:coffee -*-

Hubot    = require '..'

Fs       = require 'fs'
OptParse = require 'optparse'
Path     = require 'path'

Switches = [
  [ "-a", "--adapter ADAPTER", "The Adapter to use" ],
  [ "-c", "--create PATH",     "Create a deployable imubot" ],
  [ "-d", "--disable-httpd",   "Disable the HTTP server" ],
  [ "-h", "--help",            "Display the help information" ],
  [ "-l", "--alias ALIAS",     "Enable replacing the bot's name with alias" ],
  [ "-n", "--name NAME",       "The name of the bot in chat" ],
  [ "-r", "--require PATH",    "Alternative scripts path" ],
  [ "-t", "--config-check",    "Test imubot's config to make sure it won't fail at startup"]
  [ "-v", "--version",         "Displays the version of imubot installed" ]
]

Options =
  adapter:     process.env.MUBOT_ADAPTER or "shell"
  alias:       process.env.MUBOT_ALIAS   or false
  create:      process.env.MUBOT_CREATE  or false
  enableHttpd: process.env.MUBOT_HTTPD   or true
  scripts:     process.env.MUBOT_SCRIPTS or []
  name:        process.env.MUBOT_NAME    or "Hubot"
  path:        process.env.MUBOT_PATH    or "."
  configCheck: false

Parser = new OptParse.OptionParser(Switches)
Parser.banner = "Usage imubot [options]"

Parser.on "adapter", (opt, value) ->
  Options.adapter = value

Parser.on "create", (opt, value) ->
  Options.path = value
  Options.create = true

Parser.on "disable-httpd", (opt) ->
  Options.enableHttpd = false

Parser.on "help", (opt, value) ->
  console.log Parser.toString()
  process.exit 0

Parser.on "alias", (opt, value) ->
  value or= '/'
  Options.alias = value

Parser.on "name", (opt, value) ->
  Options.name = value

Parser.on "require", (opt, value) ->
  Options.scripts.push(value)

Parser.on "config-check", (opt) ->
  Options.configCheck = true

Parser.on "version", (opt, value) ->
  Options.version = true

Parser.on (opt, value) ->
  console.warn "Unknown option: #{opt}"

Parser.parse process.argv

unless process.platform is "win32"
  process.on 'SIGTERM', ->
    process.exit 0

if Options.create
  console.error "'imubot --create' is deprecated. Use the yeoman generator instead:"
  console.error "    npm install -g yo generator-imubot"
  console.error "    mkdir -p #{Options.path}"
  console.error "    cd #{Options.path}"
  console.error "    yo imubot"
  console.error "See https://github.com/github/imubot/blob/master/docs/index.md for more details on getting started."
  process.exit 1

else
  bot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias

  if Options.version
    console.log bot.version
    process.exit 0

  loadScripts = ->
    scriptsPath = Path.resolve ".", "scripts"
    bot.load scriptsPath

    scriptsPath = Path.resolve ".", "src", "scripts"
    bot.load scriptsPath

    imubotScripts = Path.resolve ".", "imubot-scripts.json"
    if Fs.existsSync(imubotScripts)
      data = Fs.readFileSync(imubotScripts)
      if data.length > 0
        try
          scripts = JSON.parse data
          scriptsPath = Path.resolve "node_modules", "imubot-scripts", "src", "scripts"
          bot.loadHubotScripts scriptsPath, scripts
        catch err
          bot.logger.error "Error parsing JSON data from imubot-scripts.json: #{err}"
          process.exit(1)

        imubotScriptsWarning = "Loading scripts from imubot-scripts.json is deprecated and " +
          "will be removed in 3.0 (https://github.com/github/imubot-scripts/issues/1113) " +
          "in favor of packages for each script.\n\n"

        if scripts.length is 0
          imubotScriptsWarning += "Your imubot-scripts.json is empty, so you just need to remove it."
        else
          imubotScriptsReplacements = Path.resolve "node_modules", "imubot-scripts", "replacements.json"

          if Fs.existsSync(imubotScriptsReplacements)
            imubotScriptsWarning += "The following scripts have known replacements. Follow the link for installation instructions, then remove it from imubot-scripts.json:\n"

            replacementsData = Fs.readFileSync(imubotScriptsReplacements)
            replacements = JSON.parse(replacementsData)
            scriptsWithoutReplacements = []
            for script in scripts
              replacement = replacements[script]
              if replacement
                imubotScriptsWarning += "* #{script}: #{replacement}\n"
              else
                scriptsWithoutReplacements.push(script)
            imubotScriptsWarning += "\n"

            if scriptsWithoutReplacements.length > 0
              imubotScriptsWarning += "The following scripts don't have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/imubot-scripts/issues/1641:\n"
              imubotScriptsWarning += "* #{script}\n" for script in scriptsWithoutReplacements

              imubotScriptsWarning += "\nYou an also try updating imubot-scripts to get the latest list of replacements: npm install --save imubot-scripts@latest"
          else
              imubotScriptsWarning += "To get a list of recommended replacements, update your imubot-scripts: npm install --save imubot-scripts@latest"

      bot.logger.warning imubotScriptsWarning

    externalScripts = Path.resolve ".", "external-scripts.json"
    if Fs.existsSync(externalScripts)
      Fs.readFile externalScripts, (err, data) ->
        if data.length > 0
          try
            scripts = JSON.parse data
          catch err
            console.error "Error parsing JSON data from external-scripts.json: #{err}"
            process.exit(1)
          bot.loadExternalScripts scripts

    for path in Options.scripts
      if path[0] == '/'
        scriptsPath = path
      else
        scriptsPath = Path.resolve ".", path
      bot.load scriptsPath

  if Options.configCheck
    loadScripts()
    console.log "OK"
    process.exit 0

  bot.adapter.once 'connected', loadScripts

  bot.run()
