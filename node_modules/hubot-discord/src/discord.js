(function() {
  var Adapter, Discord, DiscordBot, EnterMessage, LeaveMessage, Bot, TextChannel, TextMessage, TopicMessage, User, currentlyPlaying, prequire, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for(var key in parent) { if(hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  try {
    ref = require('mubot'), Bot = ref.Bot, Adapter = ref.Adapter, EnterMessage = ref.EnterMessage, LeaveMessage = ref.LeaveMessage, TopicMessage = ref.TopicMessage, TextMessage = ref.TextMessage, User = ref.User;
  } catch (error1) {
    console.log("CAUGHT " + error1)
    prequire = require('parent-require');
    ref1 = prequire('mubot'), Bot = ref1.Bot, Adapter = ref1.Adapter, EnterMessage = ref1.EnterMessage, LeaveMessage = ref1.LeaveMessage, TopicMessage = ref1.TopicMessage, TextMessage = ref1.TextMessage, User = ref1.User;
  }


  Discord = require("discord.js");

  TextChannel = Discord.TextChannel;

  currentlyPlaying = process.env.MUBOT_DISCORD_STATUS_MSG || '';

  DiscordBot = (function(superClass) {
    extend(DiscordBot, superClass);

    function DiscordBot(bot) {
      this.disconnected = bind(this.disconnected, this);
      this.message = bind(this.message, this);
      this.ready = bind(this.ready, this);
      DiscordBot.__super__.constructor.apply(this, arguments);
      this.rooms = {};
      if(process.env.MUBOT_DISCORD_TOKEN == null) {
        this.bot.logger.error("Error: Environment variable named `MUBOT_DISCORD_TOKEN` required")
      }
    }

    DiscordBot.prototype.run = function() {
      this.options = {
        token: process.env.MUBOT_DISCORD_TOKEN
      };
      this.client = new Discord.Client({
        autoReconnect: true,
        fetch_all_members: true,
        api_request_method: 'burst',
        ws: {
          compress: true,
          large_threshold: 1000
        }
      });
      this.bot.client = this.client;
      this.client.on('ready', this.ready);
      this.client.on('message', this.message);
      this.client.on('disconnected', this.disconnected);
      this.client.login(this.options.token).catch(this.bot.logger.error);
    };

    DiscordBot.prototype.ready = function() {
      var channel, i, len, ref2;
      this.bot.logger.info("Logged in: " + this.client.user.username + "#" + this.client.user.discriminator);
      this.bot.name = this.client.user.username;
      this.bot.logger.info("Bot Name: " + this.bot.name);
      this.emit("connected");
      ref2 = this.client.channels;
      for(i = 0, len = ref2.length; i < len; i++) {
        channel = ref2[i];
        this.rooms[channel.id] = channel;
      }
      this.client.user.setStatus('online', currentlyPlaying).then(this.bot.logger.debug("Status set to [" + currentlyPlaying + "]"))["catch"](this.bot.logger.error);
    };

    DiscordBot.prototype.message = function(message) {
      var text, user;
      if(message.author.id === this.client.user.id) return;
      user = this.bot.brain.userForId(message.author.id);
      user.room = message.channel.id;
      user.name = message.author.username;
      user.discriminator = message.author.discriminator;
      user.id = message.author.id;
      !this.rooms[message.channel.id] && (this.rooms[message.channel.id] = message.channel);
      var base, name;
      if((base = this.rooms)[name = message.channel.id] == null) {
        base[name] = message.channel
      }
      text = message.content;
      if(((message != null ? message.channel : void 0) != null) instanceof Discord.DMChannel) {
        if(!text.match(new RegExp("^@?" + this.bot.name))) {
          text = this.bot.name + ": " + text
        }
      }
      this.bot.logger.debug("<" + user.name + "> " + text);
      this.receive(new TextMessage(user, message.content, message.id));
    };

    DiscordBot.prototype.disconnected = function() {
      this.bot.logger.info(this.bot.name + " Disconnected, will auto reconnect soon...");
    };

    DiscordBot.prototype.sendMessage = function(channelId, message) {
      var channels, errorHandle, bot, sendChannelMessage, sendUserMessage;
      errorHandle = err => bot.logger.error("Error sending: " + message + "\r\n" + err);
      bot = this.bot;
      sendChannelMessage = function(channel, message) {
        var clientUser, hasPerm, isText, owner, permissions, ref2;
        clientUser = bot != null ? (ref2 = bot.client) != null ? ref2.user : void 0 : void 0;
        isText = channel !== null && channel.type === 'text';
        permissions = isText && channel.permissionsFor(clientUser);
        hasPerm = isText ? permissions !== null && permissions.has("SEND_MESSAGES") : channel.type !== 'text';
        if(hasPerm) {
          channel.send(message).then(function(msg) {
            bot.logger.debug("SUCCESS! Message sent to: " + channel.id);
          }).catch(function(err) {
            var owner;
            bot.logger.debug("Error sending: " + message + "\r\n" + err);
            if(process.env.MUBOT_OWNER) {
              owner = bot.client.users.get(process.env.MUBOT_OWNER);
              owner.send("Couldn't send message to " + channel.name + " (" + channel + ") in " + channel.guild.name + ", contact " + channel.guild.owner + ".\r\n" + error).then(function(msg) {
                bot.logger.debug("SUCCESS! Message sent to: " + owner.id);
              }).catch(function(err) {
                bot.logger.debug("Error sending: " + message + "\r\n" + err);
              })
            }
          })
        } else {
          bot.logger.debug("Can't send message to " + channel.name + ", permission denied");
          if(process.env.MUBOT_OWNER) {
            owner = bot.client.users.get(process.env.MUBOT_OWNER);
            owner.send("Couldn't send message to " + channel.name + " (" + channel + ") in " + channel.guild.name + ", contact " + channel.guild.owner + " to check permissions").then(function(msg) {
              bot.logger.debug("SUCCESS! Message sent to: " + owner.id);
            }).catch(function(err) {
              bot.logger.debug("Error sending: " + message + "\r\n" + err);
            })
          }
        }
      };
      sendUserMessage = (user, message) => user.send(message, {split: true }).then(
        msg => bot.logger.debug("SUCCESS! Message sent to: " + user.id),
        err => bot.logger.debug("Error sending: " + message + "\r\n" + err)
      );
      if(this.rooms[channelId] != null) {
        sendChannelMessage(this.rooms[channelId], message);
      } else {
        channels = this.client.channels.filter(channel => channel.id === channelId);
        if(channels.first() != null) {
          sendChannelMessage(channels.first(), message);
        } else if(this.client.users.get(channelId) != null) {
          sendUserMessage(this.client.users.get(channelId), message);
        } else {
          this.bot.logger.debug("Unknown channel id: " + channelId);
        }
      }
    };

    DiscordBot.prototype.send = function() {
      var envelope, messages;
      envelope = arguments[0], messages = arguments.length > 1 ? slice.call(arguments, 1) : [];
      for(let i = 0, len = messages.length; i < len; i++) {
        this.sendMessage(envelope.room, messages[i]);
      }
    };

    DiscordBot.prototype.reply = function() {
      var envelope, messages;
      envelope = arguments[0], messages = arguments.length > 1 ? slice.call(arguments, 1) : [];
      for(let i = 0, len = messages.length; i < len; i++) {
        this.sendMessage(envelope.room, "<@" + envelope.user.id + "> " + messages[i]);
      }
    };

    DiscordBot.prototype.channelDelete = function(channel, client) {
      var roomId, user;
      roomId = channel.id;
      user = new User(client.user.id);
      user.room = roomId;
      user.name = client.user.username;
      user.discriminator = client.user.discriminator;
      user.id = client.user.id;
      this.bot.logger.info("" + user.name + user.discriminator + " leaving " + roomId + " after a channel delete");
      this.receive(new LeaveMessage(user, null, null));
    };

    DiscordBot.prototype.guildDelete = function(guild, client) {
      var rooms = [], chans = guild.channels;
      for(let i = 0, len = chans.length; i < len; i++) {
        rooms.push(chans[i].id);
      }
      for(let room of rooms) {
        let user = new User(client.user.id);
        user.room = room;
        user.name = client.user.username;
        user.discriminator = client.user.discriminator;
        user.id = client.user.id;
        this.bot.logger.info("" + user.name + user.discriminator + " leaving " + room + " after a guild delete");
        this.receive(new LeaveMessage(user, null, null));
      }
    };

    return DiscordBot;

  })(Adapter);

  exports.use = function(bot) {
    return new DiscordBot(bot);
  };

}).call(this);
