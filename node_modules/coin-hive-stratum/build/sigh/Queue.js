const EventEmitter = require("events");

function Queue(ms) {
    EventEmitter.call(this);
    if (ms === void 0) { ms = 100; }
    this.events = [];
    this.interval = null;
    this.bypassed = false;
    this.ms = 100;
    this.ms = ms;
    return this;
}

Queue.prototype = Object.create(EventEmitter.prototype);
Queue.prototype.constructor = Queue;

Queue.prototype.start = function () {
    var _this = this;
    if (this.interval == null) {
        var that_1 = this;
        this.interval = setInterval(function () {
            var event = that_1.events.pop();
            if (event) {
                that_1.emit(event.type, event.payload);
            }
            else {
                _this.bypass();
            }
        }, this.ms);
    }
};
Queue.prototype.stop = function () {
    if (this.interval != null) {
        clearInterval(this.interval);
        this.interval = null;
    }
};
Queue.prototype.bypass = function () {
    this.bypassed = true;
    this.stop();
};
Queue.prototype.push = function (event) {
    if (this.bypassed) {
        this.emit(event.type, event.payload);
    }
    else {
        this.events.push(event);
    }
};

module.exports = Queue;
