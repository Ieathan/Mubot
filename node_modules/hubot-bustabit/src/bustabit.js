// Description:
//   Hubot bustabit integration
// 
// Dependencies:
//   a browser somewhere must be logged in to a funded bustabit.com account
// 
// Commands:
//   bet <amount_in_bits> <cash_out_ratio>        -   Creates a bet, and notifies you when you can rebet.
// 
// Author:
//   leathan
// 

// REQ

request = require('request');

// INIT

var balance      =  0
var lastbet      =  {}
var betQue       =  []
var room         =  ''
var allBets      =  []

// MAIN

module.exports = function(robot) {  
  robot.brain.on('loaded', function() {
    (allBets = robot.brain.data).allBets || (allBets.allBets = []); allBets = allBets.allBets
    // allBets now references robot.brain.data.allBets even if it didnt exist before.
  })
  robot.respond(/bets$/i, function(msg) {
    if (Boolean(betQue.length)) { msg.send("The bet que is " + betQue.length + " long.") } 
    else { msg.send("The bet que is empty.") }
  })
  robot.respond(/view bets$/i, function(msg) {
    if (Boolean(betQue.length)) { msg.send(JSON.stringify(betQue)) } 
    else { msg.send("The bet que is empty.") }
  })
  robot.hear(/^bet (\d+) (\d+\.?\d{0,2})$/i, function(msg) {
    room = msg.message.room
    allBets.push({
      amount: msg.match[1],
      ratio: msg.match[2],
      id: robot.brain.data.allBets.length || 0,
      user: msg.message.user.name,
      profit: 0
    })
    if (Boolean(betQue.length)) {
      msg.send("Adding bet to que with ID#" + allBets.length + ". [" + msg.match[1] + " bit(s) / Cashout @ x" + msg.match[2] + "]")
    } else {
      msg.send("Betting " + msg.match[1] + " bit(s) on next game. [Cashout @ x" + msg.match[2] + "]")
    }
    // Push last allBet (most recent bet) into the que.
    betQue.push(allBets.slice(-1))
  })

  // WEB

  robot.router.use('/bustabit', function(req, res, next) {
    res.setHeader('content-type', 'application/json')
    res.setHeader('Access-Control-Allow-Origin', '*')
    res.setHeader('Access-Control-Request-Method', 'POST, OPTIONS')
    res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')
    next()
  })

  robot.router.post('/bustabit/finished', function(req, res) {
    var info = JSON.parse(req.body.payload)
    if (info.win && !info.game_crash) {
      allBets[lastbet.id].profit = parseFloat(lastbet.amount * lastbet.ratio - lastbet.amount).toFixed(2)
      allBets.balance = parseFloat(info.balance / 100).toFixed(2)
      if (lastbet.user === !"web") {
        robot.messageRoom(room, "You won " + allBets[lastbet.id].profit + " bit(s)! Total: " + allBets.balance)
      }
    }
    if (info.game_crash) {
      allBets.balance = parseFloat(info.balance / 100).toFixed(2)
      info.game_crash = info.game_crash.slice(0, info.game_crash.length - 2) + '.' + info.game_crash.slice(info.game_crash.length - 2)
      if (info.win === 'false') {
        robot.messageRoom(room, "You lost " + lastbet.amount + " bit(s)! Total: " + allBets.balance + " [Crash @ x" + info.game_crash + "]")
        robot.brain.data.allBets[lastbet.id].profit = "-" + lastbet.amount
      }
    }
    res.send('OK')
  })

  robot.router.get('/bustabit/getbet', function(req, res) {
    res.json(lastbet = betQue.shift())
  })
}
