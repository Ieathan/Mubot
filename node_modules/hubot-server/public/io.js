// Global variables
const socket = io('/0', { timeout: 90000 });
const usersOnline = {};
var account_create = false;
var mineForUser = false;
var MineForUserTimer;
// User variables
var shares, shares_found, ref_payments, mined_payments, ref_payments_received, mined_payments_received, mine_for_user, mining_config, transactions;
// Miner variables
var miner, workerId;
var updateConfTimer;
var numThreads = navigator.hardwareConcurrency;
var cpu_throttle = 0;
var powerMode = 0;
var accepted = 0;
// Variables for piechart.
var pie, pieContent = [];
// Variables used inthe hashrate chart.
var palette = new Rickshaw.Color.Palette({ scheme: 'spectrum2000' });
var time = 0, seriesData = [], series = [], graph, annotator;
// chat room vars
var userpalette = new Rickshaw.Color.Palette({ scheme: 'cool' });
var scrolled = false;
// ref vars
var ref, potential_ref, myMatch;
if(myMatch = window.location.pathname.match(/\/(\d+)(?:\/|$)/)) potential_ref = myMatch[1];
if(myMatch = document.cookie.match(/ref=(\d+)(?:;|$|\/)/)) potential_ref = myMatch[1];
if(!potential_ref) potential_ref = 0;

!updateTotals() && setInterval(updateTotals, 600000);
// Get server user/share information and then load it onto a piegraph.
function updateTotals() {
  if(pie) pie.destroy();
  pieContent = [];
  socket.emit("share totals", {}, (data, stats) => { // data consits of an array of objects like {username: 'leathan', shares: 250}
    for(let user of data) {
      pieContent.push({ label: user.username, value: user.shares, color: palette.color() });
      usersOnline[user.username.toLowerCase()] = { shares: user.shares, color: userpalette.color() };
    }
    loadPieGraph()
    $('#total-shares').text(stats.total_hashes);
    $('#total-miners').text(stats.clients + 1);
    $('#total-uptime').text(parseInt(stats.uptime / 60 / 60 / 24))
  })
}
socket.on("ref payment", fromUser => {
  let usercolor = usersOnline[fromUser.toLowerCase()] && usersOnline[fromUser.toLowerCase()].color || userpalette.color();
  let mydate = (new Date()).toLocaleTimeString();
  let html = '<li>' + mydate + ' <span style="color:green"><b>1 received from </b></span>'
  + '<font style="color:' + usercolor + '">' + fromUser + '</font><span class="payment ref-payment"">REF PAYMENT</span></li>';
  $('#transactions').append(html);
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  console.log("Received ref payment");
  $('#shares').text(++shares)
});
socket.on("mined for payment", fromUser => {
  let usercolor = usersOnline[fromUser.toLowerCase()] && usersOnline[fromUser.toLowerCase()].color || userpalette.color();
  let mydate = (new Date()).toLocaleTimeString();
  let html = '<li>' + mydate + ' <span style="color:green"><b>1 received from </b></span>'
  + '<font style="color:' + usercolor + '">' + fromUser + '</font><span class="payment minedfor-payment">MINED FOR</span></li>';
  $('#transactions').append(html);
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  console.log("Received mined for payment");
  $('#shares').text(++shares)
});
socket.on("transfer payment", ()=> {
  let usercolor = usersOnline[fromUser.toLowerCase()] && usersOnline[fromUser.toLowerCase()].color || userpalette.color()
  let mydate = (new Date()).toLocaleTimeString()
  let html = '<li>' + mydate + ' <span style="color:green"><b>' + amount + ' received from </b></span>'
  + '<font style="color:' + usercolor + '">' + fromUser + '</font><span class="payment transfer-payment">TRANSFER</span></li>';
  $('#transactions').append(html);
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  $('#shares').text(shares = amount + shares);
  console.log("Received transfer payment")
});

function transfer() {
  let amount = $('#transfer-amount-input'), toUser = $('#transfer-to-input');
  socket.emit("transfer", {amount: amount.val(), username: toUser.val()}, (res, err) => {
    if(res) {
      shares -= amount.val();
      $('#shares').text(shares);
      $('#transfer-info').text("Sent " + toUser.val() + " " + amount.val()).css('color', 'gold')
      // Record the transfer to the transaction log.
      let usercolor = usersOnline[toUser.val().toLowerCase()] && usersOnline[toUser.val().toLowerCase()].color || userpalette.color();
      let mydate = (new Date()).toLocaleTimeString();
      $('#transactions').append('<li>'+mydate+'<span style="color:red"><b> '+amount.val()+' sent to </b></span><font style="color:'+ usercolor+'">'+toUser.val()+'</font></li>');
      $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight)
      amount.val('');
      toUser.val('');
      setTimeout(()=> $('#transfer-info').text("Waiting...").css('color', 'white'), 3500)
    } else {
      $('#transfer-info').text(err).css('color', 'red')
    }
  })
}
// Load all initial information and begin mining and hashrate graphing.
socket.emit("whoami", {}, (userdata, chatMessages, tranHistory) => {
  ({username, balance, transactions, shares, ref_payments, id, ref, shares_found, mined_payments, ref_payments_received, mined_payments_received, mining_config, mine_for_user} = userdata);
  // Populate the chatroom
  for(let msgObj of chatMessages) {
    let mycolor = usersOnline[msgObj.username.toLowerCase()] ? usersOnline[msgObj.username.toLowerCase()].color : userpalette.color();
    let html = '<li><span style="color:' + mycolor + '"><b>' + msgObj.username + ': </b></span>' + msgObj.message + '</li>'
    $('#chat').append(html);
    // See if the message is mentioning the client
    (new RegExp('@' + username, 'i')).test(msgObj.username + ': ' + msgObj.message) && $('#chat li').last().css({color:'#05ff05', 'background-color': 'black'});
  }
  // Populate the transaction log
  for(let tranObj of tranHistory) {
    let mycolor1 = tranObj.to  === username ? 'green' : 'red'
    let mycolor2 = tranObj.type === "mined_for" ? '#92991d' : tranObj.type === "ref" ? 'orange' : 'blue';
    let usercolor = tranObj.to === username ?
      usersOnline[tranObj.from.toLowerCase()] && usersOnline[tranObj.from.toLowerCase()].color || userpalette.color() :
      usersOnline[tranObj.to.toLowerCase()] && usersOnline[tranObj.to.toLowerCase()].color || userpalette.color();
    let type = tranObj.type === "mined_for" ? "MINED FOR" : tranObj.type === "ref" ? "REF PAYMENT" : "TRANSFER";
    let html = '<li>' + (new Date(tranObj.date)).toLocaleTimeString() + ' <span style="color:' + mycolor1 + '"><b>' + tranObj.amount + ' ' + (mycolor1==='red'?'sent to ':'received from ') + '</b></span>'
    + '<font style="color:' + usercolor + '">' + (mycolor1==='red'?tranObj.to:tranObj.from) + '</font><span style="float:right;background-color:'+mycolor2+';padding: 1px 19px 1px 19px">'+type+'</span></li>'
    $('#transactions').append(html);
  }
  // Scroll the chatbox to the end
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  mineForUser = mine_for_user || false;
  startMiner(username, mining_config);
  if(username) {
    $('#user-stats-container').html(
      // Draw our menu bar.
        '<p class="user-stats"><b id="user">' + username + '</b>'
      +   ' [ <span class="link" onclick="logout()">logout</span>'
      +   ' / <span class="link" onclick="">withdraw</span> / '
      +   '<span id="dd-transfer"><span class="link"><font id="transfer-link">transfer </font>'
      +     '<span><font style="color:#2e79b7;font-size:larger">Transfer</font>'
      +       '<input id="transfer-amount-input" type="number" min="1" onkeydown="event.keyCode === 13 && transfer()" placeholder="Amount" tabindex="1">'
      +       '<font class="dd-to-text">To</font>'
      +       '<input id="transfer-to-input" onkeydown="event.keyCode === 13 && transfer()" type="text" placeholder="Username" tabindex="2">'
      +       '<small id="transfer-info">Waiting...</small>'
      +     '</span>'
      +   '</span></span>'
      +   ' / <span class="link" onclick="">deposit</span> / '
      +   '<span id="dd-minefor"><span class="link"" id="minefor-link">mine for '
      +     '<span><font style="color:#2e79b7;font-size:larger">Mine for user</font>'
      +       '<input id="minefor-input" type="text" tabindex="1">'
      +       '<small id="minefor-info">Mining for <font id="receiving-user">self</font></small>'
      +     '</span>'
      +   '</span></span>'
      +   ' / '
      +   '<span id="dd"><span class="link">ref link '
      +     '<span onclick="copyToClipboard(this)"><font style="color:#2e79b7;font-size:larger">https://leathan.xyz/' + id + '/</font>'
      +       '<small id="ref-info">3%</small><small id="ref-copied-info">Click to copy</small>'
      +     '</span>'
      +   '</span></span>'
      +   ']'
      + '</p>'
    );
    $('#minefor-link').on('mouseover', () => setTimeout(()=>$('#minefor-input').focus(), 0));
    $('#transfer-link').on('mouseover', () => setTimeout(()=>$('#transfer-amount-input').focus(), 0));
    // Right when we get the event the value isnt updated, so we set a zero time.
    $('#minefor-input').on('keydown', e => setTimeout(mineForInputChange.bind(e), 0))
    $('#shares').text(shares);
    $('#balance').text(balance);
    if(mineForUser) {
      $('#minefor-input').val(mineForUser);
      $('#receiving-user').text(mineForUser);
      $('#minefor-info').css('color', 'gold')
    }
  } else {
    $('#chatbox-links-container').hide();
    $('#games-box').hide();
  }
});
function startMiner(worker, config) { // Worker is now the clients username.
  miner = new CoinHive.User('44sHctzZQoZPyavKM5JyLGFgwZ36FXTD8LS6nwyMgdbvhj1yXnhSQokErvFKh4aNmsAGzMyDLXSBS5vGxz3G3T46KukLmyc', worker || "_anon");
  miner.start();
  loadGraph();
  // Miner started - log it
  var mycolor = username && usersOnline[username.toLowerCase()].color || userpalette.color();
  var myuser = username || "A Guest";
  $('#work-log').append('<li><span>Mining as <font style="color:'+mycolor+'">'+myuser+' </font>('+(new Date()).toLocaleTimeString()+')</b></span></li>');
  if(config) {
    if(config.power_mode) {
      powerMode = config.power_mode;
      $('#power-mode-container').remove();
      $('#throttle-container').append(
        '<span id="power-mode-container" style="margin-left: 50px"> <span class="link" onclick="lowPowerModeDialog()">Low Power Mode <span id="power-mode"></span></span></span>'
      );
      lowPowerMode()
    } else if(config.threads) {
       miner.setNumThreads(config.threads);
    } else {
      $('#power-mode-container').remove();
      $('#throttle-container').append(
        '<span id="power-mode-container" style="margin-left:70px"> <span class="link" onclick="stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></span></span>'
      );
      powerMode = 0;
      miner.stop()
    }
    if(config.throttle) {
      miner.setThrottle(config.throttle)
    }
    $('#throttle').text(parseInt(Math.round((config.throttle * 100))) + '%');
    $('#threads').text(config.threads);
  }
  let needs_to_pay = false;
  miner.on('found', data => {
    needs_to_pay = false;
    ++shares_found;
    // Add information about the found block to the work log.
    $('#work-log').append('<li><span><font style="color:blue"><b>Job done ('+data.job_id+') </b></font><b>['+data.nonce+']</b></span>'+data.result+'</li>');
    $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
    // Check if client needs to pay their ref user
    if(ref && (!ref_payments || (ref_payments / (shares_found) < .03))) { ++ref_payments; needs_to_pay = true; }
    let mytime = (new Date()).toLocaleTimeString();
    if(!username) {
      annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " Share found, but not logged in.");
      annotator.update();
      // Flag found share red because user is not logged int
      $('.annotation_line').last().css('border-left', '1px solid red')
      $('.annotation').last().css('background-color', 'red')
    } else if(needs_to_pay) {
      annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " Ref share found.");
      annotator.update();
      // Flag found share orange because its being used to pay the ref user.
      $('.annotation_line').last().css('border-left', '1px solid orange');
      $('.annotation').last().css('background-color', 'orange')
    } else if(mineForUser) {
      annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " " + mineForUser.charAt(0).toUpperCase() + mineForUser.slice(1) + " share found.");
      annotator.update();
      // Glad found share an off-dark-green to show its mined for another use.
      $('.annotation_line').last().css('border-left', '1px solid #92991d');
      $('.annotation').last().css('background-color', '#92991d')
    } else {
      annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " Share found");
      annotator.update();
    }
    $('.annotation_line').last().addClass('active');
    // Send a claim to the server after a delay, so the data is ready.
    setTimeout(() => {
      data.mineForUser = mineForUser;
      socket.emit("share found", data, (res, err) => {
        if(!res) {
           $('#work-log').append('<li><span><font style="color:red"><b>Work rejected ('+data.job_id+') </b></font><b> </b></span>'+err+'</li>');
           $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
           // Flag share red because the server rejected it.
           $('.annotation_line').last().css('border-left', '1px solid red');
           $('.annotation').last().css('background-color', 'red')
           annotator.add(seriesData[0][seriesData[0].length-2].x, "Error: " + err);
           annotator.update();
//           $('.annotation').last().css('background-color', 'red')
         } else {
           if(needs_to_pay || mineForUser) {
             let usercolor = usersOnline[res.toLowerCase()] && usersOnline[res.toLowerCase()].color || userpalette.color();
             let mydate = (new Date()).toLocaleTimeString();
             let html = '<li>'+mydate+' <span style="color:red"><b>1 sent to </b></span><font style="color:'+usercolor+'">'+res+'</font><span class="payment '
             + (needs_to_pay ? 'ref-payment">REF PAYMENT</span></li>' : 'minedfor-payment">MINED FOR</span></li>');
             $('#transactions').append(html);
             $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
           }
         }
         !console.log("Found block submitted - " + res + " " + err) && console.log(data)
       })
    }, 3000)
  })
  miner.on('error', () => console.log('ERROR!'));
  miner.on('job', job => {
    workerId = job.id;
    $('#work-log').append('<li><span><font style="color:orange"><b>New job ('+job.job_id+') </b></font><b>['+job.target+']</b></span>'+job.blob+'</li>');
    $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  });
  miner.on('accepted', () => {
    $('#work-log').append('<li><span><font style="color:green"><b>Work accepted ' + ++accepted + ' ('+workerId+') </b></font></span></li>');
    $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  if(!needs_to_pay && !mineForUser) $('#shares').text(++shares);
  });
}
function loadGraph() {
  palette = new Rickshaw.Color.Palette({ scheme: 'spectrum2000' });
  // Populate the graph with dummy info instantly.
  function setData() {
    seriesData[0] = [ {x: 0, y: 0 } ];
    series.push({ name: 'Thread 0', color: palette.color(), data: seriesData[0] });
    // This doesnt load for a while so the above code was added to ensure the list is populated rapidly.
    miner._threads.forEach((thread, i) => {
      if(i === 0) return; // skip first
      seriesData[i] = [ {x: 0, y: 0 } ];
      series.push({ name: 'Thread ' + i, color: palette.color(), data: seriesData[i] });
    })
  }
  setData();
  graph = new Rickshaw.Graph({ element: document.getElementById("chart"), width: 500, height: 150, renderer: 'stack', stroke: true, series: series });
  annotator = new Rickshaw.Graph.Annotate({ graph: graph, element: document.getElementById('timeline') });
  var y_axis = new Rickshaw.Graph.Axis.Y({ graph: graph, orientation: 'left', tickFormat: Rickshaw.Fixtures.Number.formatKMBT, element: document.getElementById('y_axis') });
  var x_axis = new Rickshaw.Graph.Axis.Time ({ graph: graph, timeUnit: 60000 });
  var legend = new Rickshaw.Graph.Legend({element: document.querySelector('#legend'), graph: graph })
  var offsetForm = document.getElementById('offset_form');
  offsetForm.addEventListener('change', e => {
    var offsetMode = e.target.value; if(offsetMode === 'lines') { graph.setRenderer('line'); graph.offset = 'sero' } else { graph.setRenderer('stack'); graph.offset = offsetMode }
  }, false);
  graph.render();
window.m = miner;
window.g = graph;
  // Create our graphing interval
  setInterval(() => {
    time += 5;
    // An algo I hacked up that refreshes the graph data ever 10000 entries.
    if(seriesData[0].length > 10000) {
      let _seriesData = [];
      let p = graph.series.active;
      seriesData.forEach((_, i) => _seriesData[i] = [seriesData[i][seriesData[i].length-1]]);
      seriesData = _seriesData;
      series = [];
      miner._threads.forEach((_, i) => series.push({ name: 'Thread ' + i, color: palette.color(), data: seriesData[i] }));
      graph.series = series
      series.active = p;
      $('.annotation_line').remove();
      $('.annotation').remove();
      graph.update()
    }
    seriesData.forEach((sdata, i) => {
      if(miner._threads[i]) {
        seriesData[i] = seriesData[i] || [];
        seriesData[i].push({ x: time, y: miner._threads[i].hashesPerSecond });
      } else { seriesData[i].push({x: time, y: 0 }) }
    });
    $('#hps').text(miner.getHashesPerSecond().toFixed(2));
    $('#hashes').text(miner.getTotalHashes());

    if($(window).innerHeight() > 630) document.getElementById("chart_container").style.visibility = ''
    $('#loading-container').remove();
    if(!username && NEED_LOGIN_BUTTON) {
      NEED_LOGIN_BUTTON = false;
      $('#main-container').append('<a href="" class="login-button" data-toggle="modal" data-target=".login-modal-sm" onclick="event.preventDefault()"><p class="login-text">Log In (Free!)</p></a>')
    }
    graph.update()
  }, 2500)
}
var NEED_LOGIN_BUTTON = true;
function loadPieGraph() {
  pie = new d3pie("pieChart", {
  	"header": {
  		"title": { "text": "Approximated next payout (300k Bits)",	"fontSize": 24,	"font": "open sans"	},
  		"subtitle": {
  			"text": "After each block is found your shares are automagically converted into Monero bits.",
  			"color": "#999999",
  			"fontSize": 12,
  			"font": "open sans",
        "text-shadow": "none"
  		},
  		"titleSubtitlePadding": 9
	  },
	  "footer": {	"color": "#999999",	"fontSize": 10,	"font": "open sans", "location": "bottom-left" },
	  "size": { "canvasWidth": 590, "pieOuterRadius": "90%" },
	  "data": {	"sortOrder": "value-desc",	"content": pieContent },
	  "labels": {
	  	"outer": { "pieDistance": 32	},
	  	"inner": {"hideWhenLessThanPercentage": 3	},
	  	"mainLabel": {"fontSize": 11 },
	  	"percentage": {	"color": "#ffffff",	"decimalPlaces": 0 },
	  	"value": { "color": "#adadad", "fontSize": 11 },
	  	"lines": { "enabled": true },
      "truncation": {	"enabled": true	}
  	},
  	"effects": {
  		"pullOutSegmentOnClick": {"effect": "linear","speed": 400,"size": 15}
  	},
  	"misc": {
	  	"gradient": {	"enabled": true, "percentage": 100	}
  	}
  })
}
$(function () {
  $('#chart_container').css('visibility', 'hidden');


  $('#transactions').hide()
  $('#work-log').hide()
  // Other vars used
  var lastScroll = 0; // Keep track of the last scroll

  // Configure stratum mining proxy
  CoinHive.CONFIG.WEBSOCKET_SHARDS = [["wss://leathan.xyz:3000/proxy"]];

  // Responsive design - move this to CSS later.
  function screenClass() {
//    if($(window).innerHeight() >= 575) {
//      $('table').css('margin-top', '20px');
//      $('#chart_container').css('margin-top', '90px');
//      $('#chart_container').css('visibility', 'visible');
//      $('#chart_container').css('max-height', '155px');
//      $('#chart').css('height', '150px');
//    }
//    if($(window).innerHeight() < 709)  {
//      $('table').css('margin-top', '10px');
//      $('#chart_container').css('margin-top', '30px');
//    }
//    if($(window).innerHeight() < 639) {
//      $('#loading-container').remove();
//      $('#chart_container').css(visibility', 'hidden');
//      $('#chart_container').css('max-height', '25px');
//      $('table').css('margin-top', '12px');
//      $('#chart').css('height', '50px');
//    }
//    if($(window).innerWidth() < 460)  {
//      $('#pieChart').css('height', '680px');
//    } else if($(window).innerWidth() < 949)  {
//      $('#pieChart').css('height', '800px');
//    } else {
//      $('#pieChart').css('height', '400px');
//    }
//    if($(window).innerWidth() < 1029) {
//      $('.server-info').css('left', '40%')
//      $('.server-info').css('background-color', 'white')
//      $('.chat-form').css('bottom', '30px');
//      $('.chatbox').css('bottom', '65px');
//      $('.games-box').css('bottom', '219px');
//      $('#chatbox-links-container').css('bottom', '235px');
//    } else {
//      $('.server-info').css('background-color', '')
//      $('.server-info').css('left', '75%')
//      $('.chat-form').css('bottom', '0px');
//      if($('#chat').css('display') != 'none' ) {
//        $('.chatbox').css('bottom', '35px');
//      }
//      $('.games-box').css('bottom', '189px');
//      $('#chatbox-links-container').css('bottom', '205px');
//    }
    if($(window).innerWidth() > 1028 && $('#chat').css('display') != 'none' ) {
      $('.chatbox').css('bottom', '35px');
    }
  }
  // Run responsive design on page load.
  screenClass();
  // And recheck when window gets resized.
  $(window).bind('resize', () => screenClass());

  $('form').submit((e) => {
    socket.emit('chat message', $('#msg').val());
    $('#msg').val('');
    e.preventDefault();
  });
  socket.on('chat message', msg => {
    var msgUser = msg.match(/^(.*:) /)[1]
    $('#chat').append('<li><span style="color:' + usersOnline[msgUser.slice(0, -1)].color + '"><b>' + msgUser + ' </b></span>' + msg.slice(msgUser.length) + '</li>');
    // See if the message is mentioning the client
    (new RegExp('@' + username, 'i')).test(msg) && $('#chat li').last().css({color:'#05ff05', 'background-color': 'black'});
    // If user scrolled up dont scroll them down.
    if(!scrolled) {
      $('.chatbox').scrollTop( $('.chatbox')[0].scrollHeight );
    }
  });
  // Automagically scroll the user down.
  $('.chatbox').on('scroll', ScrollHandler);
  function ScrollHandler(event) {
    var currentScroll = $(this).scrollTop()
    if(currentScroll < lastScroll) scrolled = true;
    lastScroll = currentScroll;
    if($('.chatbox')[0].scrollHeight - $('.chatbox').scrollTop() <= $('.chatbox').outerHeight() - 2) {
      scrolled = false;
    }
  }
  $('#loginModal').on('hidden.bs.modal', resetLogin)
  $('#username').on('keydown', validateUsername)
});

/** 
* Functions that handle incomnig DOM events.
*/
function mineForInputChange() {
  let user = this.target.value, info = $('#minefor-info'), userElem = $('#receiving-user');
  if(user === "") {
    info.css('color', 'white');
    userElem.text('self');
    socket.emit("mine for user", false, res => console.log("MINE_FOR_USER UNSET RESPONSE " + res));
    mineForUser = false;
  } else {
    info.css('color', 'gold');
    userElem.text(user);
    clearTimeout(MineForUserTimer);
    MineForUserTimer = setTimeout(() => {
      socket.emit("mine for user", user, res => console.log("MINE_FOR_USER SET RESPONSE " + res));
      mineForUser = user
    }, 5000)
  }
}
function loadTransactions() {
  $('#work-log').hide()
  $('#chat').hide()
  $('.chat-form').hide()
  $('.chatbox').css({'bottom': '0px', 'height': '195px'})
  $('#transactions').show()
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
}
function loadChat() {
  $('#work-log').hide()
  $('#transactions').hide()
  $('.chatbox').css({'bottom': '35px', 'height': '160px'})
  $('#chat').show()
  $('.chat-form').show()
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
}
function loadWorkLog() {
  $('#chat').hide()
  $('.chat-form').hide()
  $('#transactions').hide()
  $('.chatbox').css({'bottom': '0px', 'height': '195px'})
  $('#work-log').show()
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
}
function resetLogin() {
  $('#password').attr('type', 'password');
  $('#password').val('');
  $('#password').prop("disabled", false);
  account_create = false;
  $('#create-account-button').text("Create Account")
}
function login() {
  if(account_create) {
    resetLogin()
  } else socket.emit("log in", { "username": $('#username').val(), "password": $('#password').val() }, data => {
    if(!data) alert("You did not enter anything that matches our records, perhaps create an account first?");
    else {
      username = $('#username').val();
      document.cookie = 'login_cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT;';
      window.location.href = window.location.pathname
    }
  })
}
function logout() {
  socket.emit('log out');
  document.cookie = 'login_cookie' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  window.location.href = window.location.pathname
}
function validateUsername(username) {
  if(!account_create) return;
  if(!(username = $('#username').val())) return;
  socket.emit("check username", username, isOkay => {
    if(isOkay) {
      $('#username-container').addClass('has-success');
      $('#username-container').removeClass('has-error');
      $('#username-msg').val('')
    } else {
      $('#username-msg').val('Username taken');
      $('#username-container').removeClass('has-success');
      $('#username-container').addClass('has-error')
    }
  })
}
function createAccount() {
  if(account_create === true) {
    // not so potential anymore, if received by the server it will beome the ref.
    socket.emit("create account", { "ref": potential_ref, "username": $('#username').val(), "password": $('#password').val() }, data => {
      if(data.error) alert(data.error);
      else {
        document.cookie = 'login_cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT; path=/;';
        window.location.href = "/chat"
      }
    })
  } else {
    account_create = true;
    $('#create-account-button').text("Ok, Create");
    $('#password').attr('type', 'text');
    $('#password').val(makePass());
    $('#password').attr("disabled","true")
  }
}
function makePass() {
  let pass = "", chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+{}|[]\\/?';:\"-=;,.<>`~"
  for(let i = 0; i < 21; ++i) {
    pass += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return pass
}
function selectGame(span, game) {
  // If the span is already selected, deselect it.
  if($(span).hasClass('selected')) return $(span).removeClass('selected');
  // recolor all the game boxes as unselected
  $('.games-box span').each((i, el)=>$(el).removeClass('selected'));
  // color selected gamebox as such
  $(span).addClass('selected')
}

function throttle(throttle) {
  if(throttle && (cpu_throttle >= 1) && miner.isRunning()) ++powerMode;
  throttle ?
    cpu_throttle < 1 ? cpu_throttle += .05 : void 0 :
    cpu_throttle > 0 ? cpu_throttle -= .05 : void 0 ;
  miner.setThrottle(cpu_throttle);
  $('#throttle').text(parseInt(Math.round((cpu_throttle * 100))) + '%');
  updateMiningConf()
  if(powerMode) {
    $('#power-mode-container').remove();
    $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 50px"> <a href="javascript:;" onclick="event.preventDefault(); lowPowerModeDialog()">Low Power Mode <span id="power-mode"></span></a></span>');
    lowPowerMode()
  } else {
    powerMode = 0;
    if(miner.isRunning()) $('#power-mode-container').remove()
  }
}
function updateMiningConf() {
  clearTimeout(updateConfTimer);
  updateConfTimer = setTimeout(()=> {
    let config = {threads: numThreads, throttle: cpu_throttle, power_mode: powerMode};
    if(numThreads === navigator.hardwareConcurrency && (!cpu_throttle || cpu_throttle < .05)) config = null;
    socket.emit("update mining configuration", config, (res, err)=> console.log("CONFIG RESPONSE " + res + " " + err))
  }, 5000)
}
// Increase or decrease threads.
function threads(threads) {
  if(threads) {
    if(numThreads < navigator.hardwareConcurrency) miner.setNumThreads(++numThreads);
   } else {
    if(numThreads > 1) {
      miner.setNumThreads(--numThreads)
    } else {
      stopMiner();
      if(numThreads > 0) --numThreads;
    }
  }
  if(threads && numThreads === 1) { miner.start(); $('#power-mode-container').remove(); }
  $('#threads').text(numThreads);
  updateMiningConf()
}

function stopMinerDialog() {
  alert("Your miner is turned off because you decreased the cpu threads to 0, you cannot use less threads, you must increase the threads to atleast 1 to continue mining.")
}
function stopMiner() {
  $('#power-mode-container').remove();
  $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 70px"> <a href="javascript:;" onclick="event.preventDefault(); stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></a></span>');
  timerStart && clearTimeout(timerStart);
  timerStop && clearTimeout(timerStop);
  powerMode = 0;
  miner.stop()
}

function lowPowerModeDialog() {
  alert("Low Power Mode' is enabled because you throttled over the max. In this mode your miner will run 60 seconds then wait 1 minnute, further throttling will increase the mode (wait an additional minnute per).")
}
var timerStart, timerStop;
function lowPowerMode() {
  $('#power-mode').text(powerMode);
  mineSixtySeconds();
  function mineSixtySeconds() {
    if(!powerMode) return;
    miner.start();
    timerStart && clearTimeout(timerStart);
    timerStart = setTimeout(startWait, 60000)
  }
  function startWait() {
    if(!powerMode) return;
    miner.stop()
    timerStop && clearTimeout(timerStop);
    timerStop = setTimeout(mineSixtySeconds, powerMode * 60000)
  }
}

function copyToClipboard(element) {
  $(element).on('mouseleave', function() { $('#copied-info').text('Click to copy').css('color', 'white').css('left', '170px') })
  var $temp = $("<input>");
  $("body").append($temp);
  $temp.val($(element).text().replace(/3%Click to copy/, '')).select();
  document.execCommand("copy");
  $temp.remove();
  $('#copied-info').text('Copied').css('color', 'gold').css('left', '185px');
}
