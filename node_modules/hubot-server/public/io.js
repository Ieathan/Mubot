// Our "socket".
const socket = io('/chat', { timeout: 60000 });
// Global variables
var accepted = 0; // Keep track of accepted shares
var account_create = false;
var username;
var balance;
var shares;
var time = 0; // in future use real time, but this is close enough for now.
var miner;
// Variables for piechart.
var pie;
var pieContent = [];
// Variables used inthe hashrate chart.
var palette = new Rickshaw.Color.Palette({ scheme: 'spectrum2000' });
var seriesData = [];
window.s = seriesData;
var series = [];
var graph;
var annotator;
var x_axis;
var y_axis;
var legend;
var offsetForm;


// Get server user/share information and then load it onto a piegraph.
function updateTotals() {
  if(pie) pie.destroy();
  pieContent = [];
  socket.emit("share totals", {}, (data, stats) => { // data consits of an array of objects like {username: 'leathan', shares: 250}
    for(let user of data) {
      pieContent.push({ label: user.username, value: user.shares, color: palette.color() })
    }
    loadPieGraph()
    $('#total-shares').text(stats.total_hashes);
    $('#total-miners').text(stats.clients);
    $('#total-uptime').text(parseInt(stats.uptime / 60 / 60 / 24))
  })
}
updateTotals();
setInterval(updateTotals, 600000);

// Request user-specific information.
socket.emit("whoami", {}, data => {
  ({username, balance, shares} = data);
  startMiner(username);
  if(username) {
    $('#user-stats-container').html(
      '<p class="user-stats"><b id="user">' + username + '</b> [ <a href="" onclick="event.preventDefault(); logout()">logout</a> / <a href="#" onclick="event.preventDefault()">withdraw</a>'
      + ' / <a href="" onclick="event.preventDefault()">transfer</a> / <a href="" onclick="event.preventDefault()">deposit</a> ]</p>'
    );
    $('#shares').text(shares);
    $('#balance').text(balance)
  } else {
    $('#games-box').hide();
    $('#main-container').append('<a href="" class="login-button" data-toggle="modal" data-target=".login-modal-sm" onclick="event.preventDefault()"><p class="login-text">Log In (Free!)</p></a>')
  }
});
console.log("WTF fisrt")

// Launch miner with the external IP as username. - discontinued (now username).
// $.get("ip", ip => startMiner(ip));
function startMiner(worker) { // Worker is now the clients username.
  // ip = ip.replace(/\./g, '_');
  miner = new CoinHive.User('44sHctzZQoZPyavKM5JyLGFgwZ36FXTD8LS6nwyMgdbvhj1yXnhSQokErvFKh4aNmsAGzMyDLXSBS5vGxz3G3T46KukLmyc', worker || "_anon");
  console.log("Starting miner... " + miner);
  miner.start();

window.t = miner;
  miner.on('found', data => {
    // Create annotation of the rickshaw live hashpower graph
    annotator.add(seriesData[0][seriesData[0].length-1].x, "Share found");
    // update graph.
    annotator.update();
    // Highlight the annotation.
    $('.annotation_line').last().addClass('active');
    setTimeout(() => {
      data.username = username;
      function post() {
        $.post("/gambler/api", data, function(res) {
          console.log("Found block submitted - " + res)
        }).fail(() => post())
      }
      post()
    }, 5000) // Give the server sometime to process the share before claiming.
  })
  miner.on('error', () => console.log('ERROR!'));
  miner.on('job', () => console.log("Got job."));
  miner.on('open', () => console.log("Opened."));
  miner.on('accepted', () => {
    $('#shares').text(++shares);
    console.log('Accepted! ' + ++accepted)
  })
  loadGraph()
}
function loadGraph() {
  // Populate the data rapidly.
  seriesData[0] = [ {x: 0, y: 0 } ];
  series.push({
    name: 'Thread 0',
    color: palette.color(),
    data: seriesData[0],
  });
  // This doesnt loan for a while so the above code was added to ensure the list is populated rapidly.
  miner._threads.forEach((thread, i) => {
    if(i === 0) return; // skip first
    seriesData[i] = [ {x: 0, y: 0 } ];
    series.push({
      name: 'Thread ' + i,
      color: palette.color(),
      data: seriesData[i],
    });
  })
  graph = new Rickshaw.Graph( {
    element: document.getElementById("chart"),
    width: 500,
    height: 150,
    renderer: 'stack',
    stroke: true,
    series: series
  });
  annotator = new Rickshaw.Graph.Annotate({
    graph: graph,
    element: document.getElementById('timeline')
  });

  function getTimeUnit() {
    var time = new Rickshaw.Fixtures.Time.Local();
    time.formatTime = function(d) { return moment(d).format("yyyy.mm.dd HH:mm:ss"); }
    return time.unit("minute")
  }

  x_axis = new Rickshaw.Graph.Axis.Time({
    graph: graph,
    timeUnit: getTimeUnit()
  });
  //x_axis = new Rickshaw.Graph.Axis.Time( { graph: graph } );
  y_axis = new Rickshaw.Graph.Axis.Y({
    graph: graph,
    orientation: 'left',
    tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
    element: document.getElementById('y_axis'),
  });
  legend = new Rickshaw.Graph.Legend( {
     element: document.querySelector('#legend'),
     graph: graph
  })
  offsetForm = document.getElementById('offset_form');
  offsetForm.addEventListener('change', function(e) {
    var offsetMode = e.target.value;
    if(offsetMode == 'lines') {
       graph.setRenderer('line');
       graph.offset = 'zero';
     } else {
       graph.setRenderer('stack');
       graph.offset = offsetMode;
     }
  }, false);

  graph.render();

  setInterval(() => {
    var totalHPS = 0;
    var totalH = 0;
    time += 5;
    seriesData.forEach((sdata, i) => {
      if(miner._threads[i]) {
    //miner._threads.forEach((thread, i) => {
        seriesData[i] = seriesData[i] || [];
        seriesData[i].push({ x: time, y: miner._threads[i].hashesPerSecond });
        totalHPS += miner._threads[i].hashesPerSecond;
        totalH += miner._threads[i].hashesTotal;
      } else { seriesData[i].push({x: time, y: 0 }) }
    })
    $('#hps').text(totalHPS.toFixed(2))
    $('#hashes').text(totalH)
    graph.update();
  }, 5000)
}

function loadPieGraph() {
  pie = new d3pie("pieChart", {
  	"header": {
  		"title": {
  			"text": "Approximated next payout (300k Bits)",
  			"fontSize": 24,
  			"font": "open sans"
  		},
  		"subtitle": {
  			"text": "After each block is found your shares are automagically converted into Monero bits.",
  			"color": "#999999",
  			"fontSize": 12,
  			"font": "open sans",
        "text-shadow": "none"
  		},
  		"titleSubtitlePadding": 9
	  },
	  "footer": {
	  	"color": "#999999",
	  	"fontSize": 10,
	  	"font": "open sans",
	  	"location": "bottom-left"
	  },
	  "size": {
		  "canvasWidth": 590,
		  "pieOuterRadius": "90%"
	  },
	  "data": {
  		"sortOrder": "value-desc",
	  	"content": pieContent,
	  },
	  "labels": {
	  	"outer": {
	  		"pieDistance": 32
	  	},
	  	"inner": {
	  		"hideWhenLessThanPercentage": 3
	  	},
	  	"mainLabel": {
	  		"fontSize": 11
	  	},
	  	"percentage": {
	  		"color": "#ffffff",
	  		"decimalPlaces": 0
	  	},
	  	"value": {
	  		"color": "#adadad",
	  		"fontSize": 11
	  	},
	  	"lines": {
	  		"enabled": true
		  },
		  "truncation": {
		  	"enabled": true
	  	}
  	},
  	"effects": {
  		"pullOutSegmentOnClick": {
	  		"effect": "linear",
		  	"speed": 400,
	  		"size": 15
  		}
  	},
  	"misc": {
	  	"gradient": {
  			"enabled": true,
	  		"percentage": 100
	  	}
  	}
  })
}
$(function () {
  // Other vars used
  var scrolled = false; // Keep track of when the user scrolls the chat
  var lastScroll = 0; // Keep track of the last scroll

  // Configure stratum mining proxy
  CoinHive.CONFIG.WEBSOCKET_SHARDS = [["wss://leathan.xyz:3000/proxy"]];

  // Responsive design - move this to CSS later.
  function screenClass() {
    if($(window).innerHeight() >= 575) {
      $('table').css('margin-top','20px');
      $('#chart_container').css('margin-top','90px');
      $('#chart_container').css('visibility','visible');
      $('#chart_container').css('max-height','155px');
      $('#chart').css('height','150px');
    }
    if($(window).innerHeight() < 575) {
      $('#chart_container').css('visibility','hidden');
      $('#throttle').css('visibility','hidden');
      $('#chart_container').css('max-height','25px');
      $('table').css('margin-top','12px');
      $('#chart').css('height','50px');
    }
    if($(window).innerHeight() < 628)  {
      $('table').css('margin-top','6px');
      $('#chart_container').css('margin-top','6px');
    }
    if($(window).innerHeight() < 650)  {
      $('table').css('margin-top','10px');
      $('#chart_container').css('margin-top','30px');
    }
    if($(window).innerWidth() < 949) {
      $('.chat-form').css('bottom', '30px');
      $('.chatbox').css('bottom', '65px');
      $('.games-box').css('bottom', '219px');
    } else {
      $('.chat-form').css('bottom', '0px');
      $('.chatbox').css('bottom', '35px');
      $('.games-box').css('bottom', '189px');
    }
  }
  // Run responsive design on page load.
  screenClass();
  // And recheck when window gets resized.
  $(window).bind('resize', () => screenClass());

  $('form').submit((e) => {
    socket.emit('chat message', $('#msg').val());
    $('#msg').val('');
    e.preventDefault();
  });
  socket.on('chat message', msg => {
    $('#chat').append($('<li>').text(msg));
    // If user scrolled up dont scroll them down.
    if(!scrolled) {
      $('#chatbox').scrollTop( $('#chatbox')[0].scrollHeight );
    }
  });
  // Automagically scroll the user down.
  $('#chatbox').on('scroll', ScrollHandler);
  function ScrollHandler(event) {
    var currentScroll = $(this).scrollTop()
    if(currentScroll < lastScroll) scrolled = true;
    lastScroll = currentScroll;
    if($('#chatbox')[0].scrollHeight - $('#chatbox').scrollTop() <= $('#chatbox').outerHeight() - 2) {
      scrolled = false;
    }
  }
  $('#loginModal').on('hidden.bs.modal', resetLogin)
  $('#username').on('keydown', validateUsername)
});

function resetLogin() {
  $('#password').attr('type', 'password');
  $('#password').val('');
  $('#password').prop("disabled", false);
  account_create = false;
  $('#create-account-button').text("Create Account")
}
function login() {
console.log($('#password').val())
  if(account_create) {
    resetLogin();
  } else socket.emit("log in", { "username": $('#username').val(), "password": $('#password').val() }, data => {
    if(data === false) alert("You did not enter anything that matches our records, perhaps create an account first?");
    else {
      username = $('#username').val();
      document.cookie = 'login-cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT;';
      window.location.href = "/chat";
    }
  })
}
function logout() {
  socket.emit('log out');
  document.cookie = 'login-cookie' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  window.location.href = '/chat'
}
function validateUsername(username) {
  if(!account_create) return;
  if(!(username = $('#username').val())) return;
  socket.emit("check username", username, isOkay => {
    if(isOkay) {
      $('#username-container').addClass('has-success');
      $('#username-container').removeClass('has-error');
      $('#username-msg').val('');
      return
    }
    $('#username-msg').val('Username taken');
    $('#username-container').removeClass('has-success');
    $('#username-container').addClass('has-error');
  })
}
function createAccount() {
  if(account_create === true) {
    socket.emit("create account", { "username": $('#username').val(), "password": $('#password').val() }, data => {
      if(data.error) alert(data.error);
      else {
        document.cookie = 'login-cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT; path=/;';
        window.location.href = "/chat";
      }
    })
    return
  }
  account_create = true;
  $('#create-account-button').text("Ok, Create");
  $('#password').attr('type', 'text');
  $('#password').val(makePass());
  $('#password').attr("disabled","true");
}

function makePass() {
  let pass = "";
  let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+{}|[]\\/?';:\"-=;,.<>`~"
  for(let i = 0; i < 21; ++i) {
    pass += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return pass
}

function selectGame(span, game) {
  // If the span is already selected, deselect it.
  if($(span).hasClass('selected')) return $(span).removeClass('selected');
  // recolor all the game boxes as unselected
  $('.games-box span').each((i, el)=>$(el).removeClass('selected'));
  // color selected gamebox as such
  $(span).addClass('selected')
}
var cpu_throttle = 0;
var numThreads = navigator.hardwareConcurrency;
var powerMode = 0;
function throttle(throttle) {
  if(throttle && cpu_throttle >= 1) ++powerMode;
  throttle ?
    cpu_throttle < 1 ? cpu_throttle += .05 : void 0 :
    cpu_throttle > 0 ? cpu_throttle -= .05 : void 0 ;
  miner.setThrottle(cpu_throttle);
  if(powerMode) {
    $('#power-mode-container').remove();
    $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 50px"> <a href="#" onclick="event.preventDefault(); lowPowerModeDialog()">Low Power Mode <span id="power-mode"></span></a></span>');
    lowPowerMode()
  } else {
    powerMode = 0;
    $('#power-mode-container').remove()
  }
  $('#throttle').text(parseInt(Math.round((cpu_throttle * 100))) + '%')
}
function threads(threads) {
  if(!numThreads && threads) miner.start()
  threads ?
    numThreads < navigator.hardwareConcurrency ? miner.setNumThreads(++numThreads) : void 0 :
    numThreads > 1 ? miner.setNumThreads(--numThreads) : !stopMiner() && (numThreads > 0) && --numThreads;
  if(threads && numThreads === 1) miner.start();
  $('#threads').text(numThreads)
}

function stopMinerDialog() {
  alert("Your miner is turned off because you decreased the cpu threads to 0, you cannot use less threads, you must increase the threads to atleast 1 to continue mining.")
}
function stopMiner() {
  $('#power-mode-container').remove();
  $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 70px"> <a href="#" onclick="event.preventDefault(); stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></a></span>');
  timerStart && clearTimeout(timerStart);
  timerStop && clearTimeout(timerStop);
  powerMode = 0;
  miner.stop()
}

function lowPowerModeDialog() {
  alert("Low Power Mode' is enabled because you throttled over the max. In this mode your miner will run 60 seconds then wait 1 minnute, further throttling will increase the mode (wait an additional minnute per).")
}

var timerStart, timerStop;
function lowPowerMode() {
  $('#power-mode').text(powerMode);
  mineSixtySeconds();
  function mineSixtySeconds() {
    if(!powerMode) return;
    miner.start();
    timerStart && clearTimeout(timerStart);
    timerStart = setTimeout(startWait, 60000)
  }
  function startWait() {
    if(!powerMode) return;
    miner.stop()
    timerStop && clearTimeout(timerStop);
    timerStop = setTimeout(mineSixtySeconds, powerMode * 60000)
  }
}
