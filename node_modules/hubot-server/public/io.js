/*  * * * * * * * * * * * * * * * * * * * * * * *
*      _            _   __  __ _                *
*     | |          | | |  \/  (_)               *
*     | | ___  __ _| |_| \  / |_ _ __   ___     *
*     | |/ _ \/ _` | __| |\/| | | '_ \ / _ \    *
*     | |  __/ (_| | |_| |  | | | | | |  __/    *
*     |_|\___|\__,_|\__|_|  |_|_|_| |_|\___|    *
*                                               * 
*                                               *
* * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*
*
*
*
*
* Create our lC (leatClient) */
const lC = { socket: io('/0', { timeOut: 77777 }) };
/* Turn it into a event emitter */
lC.emit = function(event, params) {
  this._listeners[event](params);
};
/* Handle events */
lC.on = function(event, callback) {
  this._listeners[event] = callback
};
/* Our only event thus far (the games will be most of them)*/
lC._listeners = {
  loaded: []
};

/*
*  Ask the server who we are.
*
*  Since the leatClient has no idea who he is, emit on the socket a request to populated
*  our leatClient object with all the goodies we need.
*
*/
lC.socket.emit("whoami", null, res =>

  Object.assign(lC, res) &&

  /complete|interactive/.test(document.readyState) ? lC.load() : lC._needLoad = true

);

/*
* Make sure we load.
*
* On the off chance the server is ready when the DOM isnt (should be never).
*
*/
$(() => lC._needLoad && delete lC._needLoad && lC.load());

/*
* Generate and mark the leatClient. (locally)
*
* This is done so that the server can send only the data that is chronologically needed.
*
*/
localStorage.leatMine || (localStorage.leatMine = {});
localStorage.leatMine.mark = Date.now();

/*
* Load mining configuations.
*
* A copy of this is still held by the server, but that will probably depreciate.
*
*/
lC.miningConfig = localStorage.leatMine.miningConfig || (
  localStorage.leatMine.miningConfig = {
    CPUThrottle: 0,
    poweMode: 0,
    CPUThreads: navigator.hardwareConcurrency|0
  }
);

/* 
* Start Miner and 5 seconds later start plotting to CPU chart
*/
lC.miner = new leatMine.User();
lC.miner.start();

/*
* Extract and save ref info.
*
* As you can see this is very easily game-able to 0 and hence why I will advertise no fees.
*
*/
let pRef;
pRef = window.location.pathname.match(/\/(\d+)(?:\/|$)/);
pRef = document.cookie.match(/ref=(\d+)(?:;|$|\/)/);
pRef = pRef ? pRef[1]|0 : 0;

localStorage.ref ? pRef = localStorage.ref : localStorage.ref = pRef;

/* Used for generating our user colors */
lC.userpalette = new Rickshaw.Color.Palette({scheme: 'cool'});

/*
* Get server user/share info
*
* This updates .user-stats / #pieChart svg
*
*/
lC.refreshStats = () => {
  graphics.pie.destroy && graphics.pie.destroy();
  lC.socket.emit("server stats", {}, (users, stats) => {
    /* loop through all users and save color plys add them to the piegraph. */
    for(let u of users) {
      pieContent.push({
        label: u.username,
        value: u.shares,
        color: lC.userpalette.color()
      })
    }
    loadPieChart(); // from io0.js.

    $('#total-shares').text(stats.total_hashes|0);
    $('#total-miners').text(+stats.clients + 1);
    $('#total-uptime').text(Math.round(stats.uptime / 60 / 60 / 24))
  })
};

/*
* Append (transactions) to the chatbox
*
* I need to clean this up, so that I can move worklog, and chatmsgs here. Not to mention hard to read.
*
*/
lC.chatBoxAppend = d => {

  var date = (new Date).toLocaleString()
  , colotT = d.amount < 0 ? "red" : (d.amount = 1) && "green" 
  , colorU = lC.users[d.user] && lC.users[d.user].color || (lC.users[d.user].color = lC.userpalette.color())
  , flag = ["REF PAYMENT", "ref-payment", "MINED FOR", "minedfor-payment", "TRANSFER", "transfer"][d.type]
  , html = '<li>' + date + ' <span style="color:"' + colorT  + '"><b>'+ d.amount + (d.received ? " received from " : " sent to ")
  + '</b></span><font style="color:' + colorU + '">' + d.user + '</font><span class="payment "' + flag[d.type+1] + '>'+ flag[d.type] + '</span></li>';
  $('#transactions').append(html);    
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  $('#shares').text(lC.shares += d.amount)

};

/*
* Interact with the chatBoxAppend
*
* The commented out code is the old version.
*
*/
lC.socket.on("ref payment", fromUser => lC.chatBoxAppend({user: fromUser, type: 0}))
lC.socket.on("mined for payment", fromUser => lC.chatBoxAppend({user: fromUser, type: 2}));
lC.socket.on("transfer payment", fromUser => lC.chatBoxAppend({user: fromUser, type: 4})); 

/*
* Transfer shares
*
* Once the platform has actual bits, this will also transfer bits. 2FA is optional here.
*
*/
lC.transfer = () => {
  let amount = (a = $('#transfer-amount-input')).val(), toUser = (t = $('#transfer-to-input')).val();
  lC.socket.emit("transfer", {amount: amount, username: toUser}, (res, err) => {
    if(res) {
      $('#transfer-info').text("Sent " + toUser + " " + amount).css('color', 'gold');
      // Record the transfer to the transaction log.
      lC.chatBoxAppend({user: toUser, amont: -amount, type: 4});
      a.val(''); t.val('');
      setTimeout(()=> $('#transfer-info').text("Waiting...").css('color', 'white'), 3500)
    } else {
      $('#transfer-info').text(err).css('color', 'red')
    }
  })
}
;
/*
* User is configuring his miner.
*
* The miner starts assuming, intelegent to the future, at high load. I coded this entire thing with it on max,
* and that is the recommended setting, but as per user requests the option is here to throttle, powerMode, or even turn it off.
*/
lC.setMiningConfig = function(type, increase) {

  if(type === 'threads') {
    if(increase) {
      this.CPUThreads < navigator.hardwareConcurrency && lC.miner.setNumThreads(++this.CPUThreads);
      this.CPUThreads === 1 && !lC.miner.start() && $('#power-mode-container').remove()      
    } else {
      if(this.CPUThreads === 0 )return;
      else if(this.CPUThreads > 1) {
        lC.miner.setNumThreads(--this.CPUThreads)
      } else { /* CPUThreads === 1 */
        $('#power-mode-container').remove();
        $('#throttle-container').append(
          '<span id="power-mode-container" style="margin-left:70px"> <span class="link" onclick="stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></span></span>'
        );
        this.CPUThreads = 0;
        lC.miner.stop();
        $('#work-log').append('<li><span>Mining shut down <font style="color:red">Threads is at 0 </font>('+Date().toLocaleString()+')</b></span></li>')

        if(this.CPUThreads > 0) --this.CPUThreads;
      }
    }
    $('#threads').text(this.CPUThreads);
 
  } else if(type === 'throttle') {
  
    increaset && (this.throttle >= 1) && lC.miner.isRunning() && ++this.powerMode;
    increase ?
      this.throttle < 1 ? this.throttle += .05 : void 0 :
      this.throttle > 0 ? this.throttle -= .05 : void 0 ;
    lC.miner.setThrottle(this.throttle);
    $('#throttle').text(parseInt(Math.round((this.throttle * 100))) + '%');

    if(this.powerMode) {
      $('#power-mode-container').remove();
      $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 50px"> <a href="javascript:;" onclick="event.preventDefault(); lowPowerModeDialog()">Low Power Mode <span id="power-mode"></span></a></span>');
      lowPowerMode()
    } else {
      this.powerMode = 0;
      if(lC.miner.isRunning()) $('#power-mode-container').remove()
    }
  }
  lC.updateMiningConfig();
  return !!(localStorage.miningConfig = this);

}.bind(lC.miningConfig);

/*
 Start
  _____                 _     _             
 / ____|               | |   (_)            
| |  __ _ __ __ _ _ __ | |__  _ _ __   __ _ 
| | |_ | '__/ _` | '_ \| '_ \| | '_ \ / _` |
| |__| | | | (_| | |_) | | | | | | | | (_| |
 \_____|_|  \__,_| .__/|_| |_|_|_| |_|\__, |
                | |                   __/ /
 Section        |_|                  |___/ 
*
*
*
* Create the CPU graph.
*/ 
lC.graph = { 
  time: 0,
  palette: new Rickshaw.Color.Palette({scheme: 'spectrum2000'}),
};

lC.loadGraph = function() {

  /* Here we store our CPU info in a 2 dimensional
   * array, the first dimension represents the thread number
   * the second is the threads hashing speeds versus time. 
   * x = time, y = hashes per second
   */
  this.seriesData = [];
  /* Loop through the available CPU threads */
  let i = 0, l = lC.miner._targetNumThreads;
  do {
    this.seriesData[i] = [];
    this.seriesData[i].push({x: 0, y: 0}) // First spot is a dud.
  } while(++i < l);

  /* series is a 1 dimensional array of objects, 
   * which represent a CPU thread, the object in turn 
   * references series data which holds the CPU info 
   */
  this.series = [];
  /* This should match the CPU threads we set seriesData with */
  for(let i = 0, l = this.seriesData.length; i < l; ++i) {
    this.series.push({
      name: 'Thread ' + i, 
      color: this.palette.color(),
      data: this.seriesData[i]
    })
  }
  /*  
  * Here we finally create the graph,
  * which we store right in lC.graph.
  * so the final graph is lC.graph.graph
  */
  this.graph = new Rickshaw.Graph({
    element: document.getElementById("chart"),
    width: 400,   
    height: 150,
    stroke: true,
    renderer: 'stack',
    series: this.series
  });
  this.hoverDetail = new Rickshaw.Graph.HoverDetail({
    graph: this.graph,
    xFormatter: function(x) {
      return new Date(x * 1000).toString();
    }
  });
  this.legend = new Rickshaw.Graph.Legend({
    graph: this.graph,
    element: document.getElementById('legend')
  });
  this.annotator = new Rickshaw.Graph.Annotate({
    graph: this.graph,
    element: document.getElementById('timeline')
  });
  
  this.graph.render();

  lC.refreshGraph();

  /* lil hack to ensure timeline is under the svg element
   * without editing the rickshaw source directly */
  var el = $('#timeline').remove();
  $('#chart').append(el);

}.bind(lC.graph);

/*
* Add live data to our CPU graph.
*/
lC.refreshGraph = function(wait) {

  if(this.seriesData && this.seriesData[0].length > 1000)
    lC.resetGraph();

  this.time += 5;
  wait = wait || 5000;

  for(let i = 0, l = lC.miner._threads.length; i < l; ++i) {
    this.seriesData[i] = this.seriesData[i] || [];
    this.seriesData[i].push({ x: this.time, y: lC.miner._threads[i].hashesPerSecond })
  }
  this.graph.update();
 
  /* Freindly green text for user */
  $('#hps').text(lC.miner.getHashesPerSecond().toFixed(2));
  $('#hashes').text(lC.miner.getTotalHashes());

  setTimeout(lC.refreshGraph.bind(null, wait), wait) 
}.bind(lC.graph);

/*
* Reset the CPU Graph.
*
* I could not find anything in the documentation on how to 
* accomplish this task, so it may seem like a bit of a hack
* to the author, but I have already posted to their github report
* this solution, and it seems people are using it.
*/
lC.resetGraph = function() {
 
  /* Remove the 'Threads' from legend, user should know by now. */
  $('#legend').css('right', '335px');

  /* preserve this 'needed' function */
  var p = this.graph.series.active;

  /* reset the data to an empty array. */
  this.series = [];

  /* Set the first item of the new data to the
  * last item of the old data.
  */
  var _seriesData = [];
  for(let i = 0, l = this.seriesData.length; i < l; ++i) {
    _seriesData[i] = [this.seriesData[i][this.seriesData[i].length-1]]
  }
  this.seriesData = _seriesData;

  /* populate series with new data */
  for(let i = 0; i < 4; i++) {
    this.series.push(
      { name: i, 
        color: this.seriesData[i].color, 
        data: this.seriesData[i]
      }
    )
  }
  /* unpreserve */
  this.series.active = p;
  /* set graph data to new data. */
  this.graph.series = this.series;

  document.getElementById('legend').innerHTML = ""
  this.legend = new Rickshaw.Graph.Legend({
    graph: this.graph,
    element: document.getElementById('legend')
  });

  this.graph.update() // update

}.bind(lC.graph);

/*
* Anotate our CPU chart with.
*
* The leatMmine object will report here on events.
*
*/
lC.annotateChart = function(text, color) {

  if(!this || !this.annotator) return;

  this.annotator.add(
    this.seriesData[0][this.seriesData[0].length-1].x,
    Date().toLocaleString() + " " + text
  );
  this.annotator.update()
  // Flag found share red because user is not logged int
  $('.annotation_line').last().css('border-left', '1px solid ' + color)
  $('.annotation').last().css('background-color', color)
  $('.annotation_line').last().addClass('active'); 

}.bind(lC.graph);

/*
  __  __ _                    _____           
 |  \/  (_)                  / ____|          
 | \  / |_ _ __   ___ _ __  | (___   ___  ___ 
 | |\/| | | '_ \ / _ \ '__|  \___ \ / _ \/ __|
 | |  | | | | | |  __/ |     ____) |  __/ (__ 
 |_|  |_|_|_| |_|\___|_|    |_____/ \___|\___|
                                              
*/

lC.miner.on('found', data => {
  ++lC.sharesFound;
  // Add information about the found block to the work log.
  $('#work-log').append('<li><span><font style="color:blue"><b>Job done ('+data.job_id+') </b></font><b>['+data.nonce+']</b></span>'+data.result+'</li>');
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);

  // Quick terenary check for ref payment status
  lC.ref && lC.refPayments / lC.sharesFound < .03 ?

    lC.needsToPay = true && ++lC.refPayments
  :
    delete lC.needsToPay;

  if(lC.username.slice(0, 6) === 'Guest ') {
    lC.annotateChart(" Share found, but not logged in.", "red");
  } else if(lC.needsToPay) {
    lC.annotateChart("Ref share found.", "orange");
  } else if(lC.isMiningFor) {
    lC.annotateChart(
      lC.isMiningFor.charAt(0).toUpperCase() + lC.isMiningFor.slice(1) + " share found.", '#92991d'
    );
  } else {
    lC.annotateChart("Share found", "green");
  }

  /* Send a claim to the server after a delay, so the data is ready. */
  setTimeout(() => {
    data.isMiningFor = lC.isMiningFor;
    lC.socket.emit("share found", data, (user, err) => {
      if(!user) {
        $('#work-log').append('<li><span><font style="color:red"><b>Work rejected ('+data.job_id+')</b></font></span> ' + err + '</li>');
        $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
        // Flag share red because the server rejected it.
        lC.annotateChart("Error: " + err, "red");
      } else {
        if(lC.needsToPay || lC.isMiningFor) {
          lC.chatBoxAppend(
            { user: user,
              color: lC.users[user] ? lC.users[user].color : lC.users[user].color = lC.userpalette.color()
            }
          )
        }
      }
    })
  }, 3000)
});

lC.miner.on('error', () => console.log('ERROR!'));

lC.miner.on('accepted', () => {
  /* this is wrong, to fix it i neeed to move this into the sharesFound call, and then react after a server confirmation. */
  $('#work-log').append('<li><span><font style="color:green"><b>Work accepted ' + lC.miner.getAcceptedHashes() + ' ('+lC.workerId+') </b></font></span></li>');
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);
  if(!lC.needsToPay && !lC.isMiningFor) $('#shares').text(++lC.shares)
});

/* 
   _____            _             _   
  / ____|          | |           | |  
 | |     ___  _ __ | |_ ___ _ __ | |_ 
 | |    / _ \| '_ \| __/ _ \ '_ \| __|
 | |___| (_) | | | | ||  __/ | | | |_ 
  \_____\___/|_| |_|\__\___|_| |_|\__|

* 
*
* DOM READY EVENT FIRED
*
* Our jquery section. We are free to start flashing the screen with data and games!
*
*/
lC.load = () => {
  /* First we hide our charts (as the loading screen displays) */

  /* Even if dom isnt ready, we got the user */
  lC.miner._user = lC.username;

  /* Our hack to ensure that if the server is ready and dom isnt we still load */
  delete lC._needLoad;

  /* toColor is used to temporarily save users colors. */
  const toColor = u => lC.users[u] || (lC.users[u] = u) && lC.users[u].color || (lC.users[u].color = lC.userpalette.color());

  /* populates #pieChart svg and .server-stats */
  setInterval(lC.refreshStats, 600000); lC.refreshStats();

  /* After the loading animation is up for 5.777 seconds show graph */
  lC.loadGraph();
 
  setTimeout(()=>{
    $('.loading').hide();
    $('.chart').removeClass('hide')
  }, 5777)

  /* 
   * The first job may be a forced contribution to the server host,
   * the rare occurance may be because the miner launches before the dom is loaded
   * the expected behavior is the stratum still broadcasts it as the users,
   * and hence no contribution. But the user will for sure be unotified, of even the work.
   */
  lC.miner.on('job', job => {
    lC.workerId = job.id;
    $('#work-log').append('<li><span><font style="color:orange"><b>New job ('+job.job_id+') </b></font><b>['+job.target+']</b></span>'+job.blob+'</li>');
    $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight)
  });

  /* Print to the work log that were running */
  if(lC.miner.isRunning()) {
    $('#work-log').append(
      '<li><span>Mining as <font style="color:' + toColor(lC.username) + '">'
      + lC.username + ' </font><b>('+Date().toLocaleString()+')</b></span></li>'
    );
  }

  /* Populate the chatroom */
  for(let i = 0, l = lC.chatMsgs.length; i < l; ++i) {
    let m = lC.chatMsgs[i];
    let color = toColor(m.username);
    $('#chat').append('<li><span style="color:' + color + '"><b>' + m.username + ': </b></span>' + m.message + '</li>');
    // See if the message is mentioning the lC
    m.username !== lC.username && RegExp('@' + lC.username, 'i').test(m.message) && 
      $('#chat li').last().css('background-color', $.Color($('#chat li').css('background-color')).blue(255))
  }
  // Populate the transaction log
  for(let t of lC.transactions) {
    let to = to, from = from;
    let color = to  === username ? 'green' : 'red'
    let tcolor = t.type === "mined_for" ? '#92991d' : t.type === "ref" ? 'orange' : 'blue';
    let usercolor = to === username ? lC.users[from].color || lC.userpalette.color() :
      lC.users[to] && lC.users[to].color || lC.userpalette.color();
    let type = t.type === "mined_for" ? "MINED FOR" : t.type === "ref" ? "REF PAYMENT" : "TRANSFER";
    let html = '<li>' + Date(t.date).toLocaleString() + ' <span style="color:' + mycolor1 + '"><b>' + t.amount + ' ' + (mycolor1==='red'?'sent to ':'received from ') + '</b></span>'
    + '<font style="color:' + usercolor + '">' + (mycolor1==='red'?to:from) + '</font><span style="float:right;background-color:'+mycolor2+';padding: 1px 19px 1px 19px">'+type+'</span></li>'
    $('#transactions').append(html);
  }
  /* Scroll the chatbox to the end. */
  $('.chatbox').scrollTop($('.chatbox')[0].scrollHeight);

  if(true){ //username.slice(0, 6) !== 'Guest ') {

     /* MOVE THIS ENTIRE THING INTO THE HTML FILE AND HIDE IT WITH A CLASS */

    $('#user-stats-container').html(
        /* Draw our menu bar. */
        '<p class="user-stats"><b id="user">' + lC.username + '</b>'
      +   ' [ <span class="link" onclick="lC.logout()">logout</span>'

      +   (!lC.tfa && ' / <span id="dd-tfa"><span class="link"><font id="tfa-link">2FA </font>'
      +     '<span><font class="tfa-disabled">Disabled</font>'

      +       '<img id="qrcode" width="200" height="200"></img>' 

      +       '<button id="tfa-button" onclick="lC.enable2fa()">Enable</button>' 

      +       '<input id="tfa-input" class="tfa hide tfa-input" required="true" onkeydown="event.keyCode === 13 && lC.enable2fa()" placeholder="Code" tabindex="1">'
      +       '<small id="tfa-info" class="tfa hide tfa-info">Waiting...</small>'
      +     '</span>'
      +   '</span></span>')



      +   ' / <span class="link" onclick="">withdraw</span> / '
      +   '<span id="dd-transfer"><span class="link"><font id="transfer-link">transfer </font>'
      +     '<span><font style="color:#2e79b7;font-size:larger">Transfer</font>'
      +       '<input id="transfer-amount-input" type="number" min="1" onkeydown="event.keyCode === 13 && lC.transfer()" placeholder="Amount" tabindex="1">'
      +       '<font class="dd-to-text">To</font>'
      +       '<input id="transfer-to-input" onkeydown="event.keyCode === 13 && lC.transfer()" type="text" placeholder="Username" tabindex="2">'
      +       '<small id="transfer-info">Waiting...</small>'
      +     '</span>'
      +   '</span></span>'
      +   ' / <span class="link" onclick="">deposit</span> / '
      +   '<span id="dd-minefor"><span class="link"" id="minefor-link">mine for '
      +     '<span><font style="color:#2e79b7;font-size:larger">Mine for user</font>'
      +       '<input id="minefor-input" type="text" tabindex="1">'
      +       '<small id="minefor-info">Mining for <font id="receiving-user">self</font></small>'
      +     '</span>'
      +   '</span></span>'
      +   ' / '
      +   '<span id="dd"><span class="link">ref link '
      +     '<span id="ddref" onclick="lC.copyRefToClipboard(this)"><font style="color:#2e79b7;font-size:larger">https://leathan.xyz/' + lC.id + '/</font>'
      +       '<small id="ref-info">3%</small><small id="ref-copied-info">Click to copy</small>'
      +     '</span>'
      +   '</span></span>'
      +   ']'
      + '</p>'
    );
  
    $('#tfa-link').on('mouseover', () => setTimeout(()=>$('#tfa2').focus(), 0));
   
    $('#minefor-link').on('mouseover', () => setTimeout(()=>$('#minefor-input').focus(), 0));
    $('#transfer-link').on('mouseover', () => setTimeout(()=>$('#transfer-amount-input').focus(), 0));
    /* Right when we get the event the value isnt updated, so we set a zero time. */
    $('#minefor-input').on('keydown', e => setTimeout(mineForInputChange.bind(e), 0))

    $('#shares').text(lC.shares);
    $('#balance').text(lC.balance);
    if(lC.isMiningFor) {
      $('#minefor-input').val(lC.isMiningFor);
      $('#receiving-user').text(lC.isMiningFor);
      $('#minefor-info').css('color', 'gold')
    }
  } else {
    $('#chatbox-links-container').hide();
    $('#games-box').hide();
  }

  $('#transactions').hide()
  $('#work-log').hide()

  // Move the chatbox bottom back up for the chat input.
  $(window).bind({
    'resize': fthrottle(windowResize, 500),
    'beforeunload': windowUnloaded
  })

  $('form').submit((e) => {
    lC.socket.emit('chat message', $('#msg').val());
    $('#msg').val('');
    e.preventDefault()
  });

  /* Keep track of the last scroll */
  var lastScroll;
  var cb = $('.chatbox')
  /* Automagically scroll the user down. */
  cb.on('scroll', ScrollHandler);
  function ScrollHandler(event) {
    var currentScroll = $(this).scrollTop();

    if(currentScroll < lastScroll)
      lC.chatBoxIsScrolled = true;

    lastScroll = currentScroll;
    if(cb[0].scrollHeight - cb.scrollTop() <= cb.outerHeight() - 2) {
      delete lC.chatBoxIsScrolled
    }
  }

  $('#loginModal').on({
    'hidden.bs.modal': lC.resetLogin,
    'shown.bs.modal': $('#username').focus
  });

  $('#username').on('keydown', validateUsername);
  lC.socket.on('chat message', msg => {
    var user = msg.match(/^(.*): /)[1].toLowerCase(), color = lC.users[user].color;
    var isDM = RegExp('@' + username, 'i').test(msg);
    $('#chat').append('<li><span style="color:'+color+'"><b>'+user+': </b></span>'+msg.slice(user.length+1)+'</li>');
    // See if the message is mentioning the lC
    if(match && user !== username.toLowerCase()) {
      chat_li = $('#chat li'), clc = chat_li.
      $()
      $('#chat li').last().css({'background-color':'cyan'})
      beep();
      $()
    }
    // If user scrolled up dont scroll them down.
    !lC.chatBoxIsScrolled && cb.scrollTop(cb[0].scrollHeight);
  });
};



lC.enable2fa = () => {

  $('.tfa').removeClass('hide');

  $('#tfa-button').disable().prop('value', '[Enter]')

  lC.socket.emit("enable tfa")
};


/*
  ______                _   _                 
 |  ____|              | | (_)                
 | |__ _   _ _ __   ___| |_ _  ___  _ __  ___ 
 |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
 | |  | |_| | | | | (__| |_| | (_) | | | \__ \
 |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
                                                                                          
*/
function beep() {
    return (new Audio("data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=")).play()
}

function cssRGBToHex(cssRGB) {
  var digits = cssRGB.match(/^rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)$/).slice(1);
  var alphabet = "0123456789abcdef";
  var i = digits.length, l = alphabet.length;

  var res = [], carry = 0;
  while(i-- || carry) {
    let cur = digits[i] | 0;
    total = (carry + cur) % l;
    carry = cur - total;
    res.push(total)
  }
  return res.map(_=>alphabet[_]);
}
function login() {
  if(lC.isCreatingAccount) {
    resetLogin()
  } else lC.socket.emit("log in", { "username": $('#username').val(), "password": $('#password').val() }, data => {
    if(!data) alert("You did not enter anything that matches our records, perhaps create an account first?");
    else {
      username = $('#username').val();
      console.log("Setting cookie to: " + data.slice(0, 32))
      document.cookie = 'login_cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT;';
      window.location.href = window.location.pathname
    }
  })
}
function logout() {
  lC.socket.emit('log out');
  document.cookie = 'login_cookie' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  window.location.href = window.location.pathname
}
function validateUsername(username) {
  if(!lC.isCreatingAccount) return;
  if(!(username = $('#username').val())) return;
  lC.socket.emit("check username", username, isOkay => {
    if(isOkay) {
      $('#username-container').addClass('has-success');
      $('#username-container').removeClass('has-error');
      $('#username-msg').val('')
    } else {
      $('#username-msg').val('Username taken');
      $('#username-container').removeClass('has-success');
      $('#username-container').addClass('has-error')
    }
  })
}
function createAccount() {
  if(lC.isCreatingAccount === true) {
    // not so potential anymore, if received by the server it will beome the ref.
    lC.socket.emit("create account", { "ref": pRef, "username": $('#username').val(), "password": $('#password').val() }, data => {
      if(data.error) alert(data.error);
      else {
        console.log("Setting cookie to: " + data.slice(0, 32));
        document.cookie = 'login_cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT; path=/;';
        window.location.href = window.pathname.location
      }
    })
  } else {
    delete lC.isCreatingAccount;
    $('#create-account-button').text("Ok, Create");
    $('#password').attr('type', 'text');
    $('#password').val(makePass());
    $('#password').attr("disabled","true")
  }
}
function makePass() {
  var pass = "";
  while(pass.length < 32) {
    let t = window.crypto.getRandomValues(new Uint8Array(1))[0];
    if(t >= 33 && t <= 126) pass+=String.fromCharCode(t)
  }
  return pass
}

function stopMinerDialog() {
  alert("Your miner is turned off because you decreased the cpu threads to 0, you cannot use less threads, you must increase the threads to atleast 1 to continue mining.")
}
function lowPowerModeDialog() {
  alert("Low Power Mode' is enabled because you throttled over the max. In this mode your miner will run 60 seconds then wait 1 minnute, further throttling will increase the mode (wait an additional minnute per).")
}
function windowUnloaded() {
  lC.socket.close();
  lC.socket.destroy();
  //return ""
}
function windowResize() {
  var d = $('#chat').css('display') != 'none';
  if($(window).innerWidth() > 1028) {
    /* Pretty sure I can just .toggleClass('bh') here lol */
    $('.chatbox')[(d?'add':'remove')+'Class']('bh')
    !d && resizeChat('down')
  } else {
                               /* Should we resize up now? */
    console.log("Do we need to do anything special here? (window.innerWidth < 1028)")
  }
}
/*
* function throttle to not lag out on dom event spams.
* from underscore.js.
*/
function fthrottle(func, wait) {
  var context, args, result;
  var timeout = null;
  var previous = 0;
  var later = function() {
    previous = Date.now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null
  };
  return function() {
    var now = Date.now();
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null
      }
      previous = now;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout) {
      timeout = setTimeout(later, remaining)
    }
    return result
  }
};

/*
  __  __ _          
 |  \/  (_)         
 | \  / |_ ___  ___ 
 | |\/| | / __|/ __|
 | |  | | \__ \ (__ 
 |_|  |_|_|___/\___|
                                      
*/
lC.selectGame = (span, game) => {
  // If the span is already selected, deselect it.
  if($(span).hasClass('selected')) return $(span).removeClass('selected');
  // recolor all the game boxes as unselected
  $('.games-box span').each((i, el)=>$(el).removeClass('selected'));
  // color selected gamebox as such
  $(span).addClass('selected')
}

lC.mineForInputChange = () => {
  let user = this.target.value, info = $('#minefor-info'), userElem = $('#receiving-user');
  if(user === "") {
    info.css('color', 'white');
    userElem.text('self');
    lC.socket.emit("mine for user", false, res => {
      console.log("Server response for unsetting mineForUser was " + res)
    });
    delete lC.isMiningFor
  } else {
    info.css('color', 'gold');
    userElem.text(user);
    lC.clearTimeout(MineForUserTimer);
    lC.MineForUserTimer = setTimeout(() => {
      lC.socket.emit("mine for user", user, res => {
       console.log("Server response for mineForUser was " + res)
      });
      lC.isMiningFor = user
    }, 3000)
  }
};

lC.updateMiningConfig = function() {

  clearTimeout(lC.updateConfTimer);

  lC.updateConfTimer = setTimeout(()=> {
    if (this.CPUThreads === navigator.hardwareConcurrency && !this.CPUThrottle)
      this.powerMode = 0;
    lC.socket.emit("update mining configuration", this, (res, err) => {
      console.log("Server response for configuration was " + res + " " + err)
    })
  }, 3000)

}.bind(lC.miningConfig);

lC.stopMiner = () => {
  $('#power-mode-container').remove();
  $('#throttle-container').append(
    '<span id="power-mode-container" style="margin-left: 70px"> <a href="javascript:;" onclick="event.preventDefault();' 
    + ' stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></a></span>'
  );
  startMinerTimer && clearTimeout(startMinerTimer);
  stopMinerTimer && clearTimeout(stopMinerTimer);
  powerMode = 0;
  miner.stop()
};

lC.setPowerMode = () => {
  $('#power-mode').text(powerMode);
  mineSixtySeconds();
  function mineSixtySeconds() {
    if(!powerMode) return;
    miner.start();
    startMinerTimer && clearTimeout(startMinerTimer);
    startMinerTimer = setTimeout(startWait, 60000)
  }
  function startWait() {
    if(!powerMode) return;
    miner.stop();
    stopMinerTimer && clearTimeout(stopMinerTimer);
    stopMinerTimer = setTimeout(mineSixtySeconds, powerMode * 60000)
  }
};

lC.copyRefToClipboard = element => {
  $(element).on('mouseleave', ()=>{
    $('#copied-info').text('Click to copy').css({'color': 'white', 'left': '170px'})
  })
  var temp = $("<input>");
  $("body").append(temp);
  temp.val($(element).text().replace(/3%Click to copy/, '')).select();
  document.execCommand("copy");
  temp.remove();
  $('#copied-info').text('Copied').css({'color': 'gold', 'left': '185px'})
};

lC.resizeChat = new function() {
  var lastG;
  return grow => {
    if(lastG === grow) return;
    var
      c = $('.chatbox'),
      [sw, sh] = [$(window).outerWidth(), $(window).outerHeight()],
      [ch, cb] = [+c.css('height').slice(0, -2), +c.css('bottom').slice(0, -2)],
      ih = +$('.chat-form').css('height').slice(0, -2),
      mode = sw > 1029;

    if(["down", "up"].includes(grow))
      c.css('bottom', (grow === "down" ? cb - ih : cb + ih) + "px")
    else
      c.css('bottom', (grow ? cb - ih : cb + ih) + "px")
       .css('height', (grow ? ch + ih : ch - ih) + "px")

    // clean up
    c.scrollTop(c[0].scrollHeight);
    //$('.chatbox-border').css('padding', (grow ? 0 : 5) + 'px');

    // FLAG to not grow/shrink more than once.
    return lastG = grow
  }
};

lC.showChat = function(type) {
  const chats = {
    work: "#work-log",
    trans: "#transactions",
    chat: "#chat,.chat-form"
  };

  for(let t in chats)
    type === t ? $(chats[t]).show() : $(chats[t]).hide()

  // If its chat use resize(false) to shrink.
  lC.resizeChat(type !== 'chat')
};

lC.resetLogin = () => {
  $('#password').attr('type', 'password');
  $('#password').val('');
  $('#password').prop("disabled", false);
  lC.isCreatingAccount = false;
  $('#create-account-button').text("Create Account")
};


/*
*
*
*
*
*
*
**************************************************
*                                                *
*  _            _    _____ _ _            _      *
* | |          | |  / ____| (_)          | |     *
* | | ___  __ _| |_| |    | |_  ___ _ __ | |_    *
* | |/ _ \/ _` | __| |    | | |/ _ \ '_ \| __|   *
* | |  __/ (_| | |_| |____| | |  __/ | | | |_    *
* |_|\___|\__,_|\__|\_____|_|_|\___|_| |_|\__|   *
*                                                *
*************************************************/