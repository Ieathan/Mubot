// Our "socket".
const socket = io('/0', { timeout: 90000 });
// Global variables
var accepted = 0; // Keep track of accepted shares
var account_create = false;
var shares_found;
var ref_payments;
var mined_payments;
var ref_payments_received;
var mined_payments_received;
var mine_for_user;
var mining_config;
var transactions;
var time = 0; // in future use real time, but this is close enough for now.
var miner;
var workerId;
// Variables for piechart.
var pie;
var pieContent = [];
// Variables used inthe hashrate chart.
var palette = new Rickshaw.Color.Palette({ scheme: 'spectrum2000' });
var seriesData = [];
var series = [];
var graph;
var annotator;

// chat room vars
var userpalette = new Rickshaw.Color.Palette({ scheme: 'cool' });
var scrolled = false;

// ref vars
var ref; // The clients ref
var potential_ref; // The unlogged in clients potential ref
var myMatch;

if(myMatch = window.location.pathname.match(/\/(\d+)(?:\/|$)/)) potential_ref = myMatch[1];
if(myMatch = document.cookie.match(/ref=(\d+)(?:;|$|\/)/)) potential_ref = myMatch[1];
if(!potential_ref) potential_ref = 0;

usersOnline = {} // {usernameString: { shares: Number, color: HTMLColor}
// Get server user/share information and then load it onto a piegraph.
function updateTotals() {
  if(pie) pie.destroy();
  pieContent = [];
  socket.emit("share totals", {}, (data, stats) => { // data consits of an array of objects like {username: 'leathan', shares: 250}
    for(let user of data) {
      pieContent.push({ label: user.username, value: user.shares, color: palette.color() });
      usersOnline[user.username.toLowerCase()] = { shares: user.shares, color: userpalette.color() }
    }
    loadPieGraph()
    $('#total-shares').text(stats.total_hashes);
    $('#total-miners').text(stats.clients + 1);
    $('#total-uptime').text(parseInt(stats.uptime / 60 / 60 / 24))
  })
}
updateTotals();
setInterval(updateTotals, 600000);

var mineForUser = false;
var MineForUserTimer;
// this function ise binded with an event.
function mineForInputChange() {
  let user = this.target.value;
  let info = $('#mine-for-info');
  let userElem = $('#receiving-user');
  if(user === "") {
     //info.css('color', 'white').css('left', '165px'); userElem.text('self');
     info.css('color', 'white'); userElem.text('self');
     socket.emit("mine for user", false, res => console.log("EMPTY RESPONSE WAS " + res));
     mineForUser = false;
  } else {
    //info.css('color', 'gold'); userElem.text(user); info.css('left', 165 - userElem.width() + 17 + 'px');
    info.css('color', 'gold'); userElem.text(user);

    clearTimeout(MineForUserTimer);
    MineForUserTimer = setTimeout(() => {
      socket.emit("mine for user", user, res => console.log("RESPONSE WAS " + res))
      miner._user = user;
      mineForUser = user
    }, 5000)
  }
}

socket.on("ref payment", ()=> !console.log("Received ref payment") && $('#shares').text(++shares));
socket.on("mined for payment", ()=> !console.log("Received mined for payment") && $('#shares').text(++shares));
socket.on("transfer payment", ()=> !console.log("Received transfer payment") && $('#shares').text(shares = amount + shares));

function transfer() {
  var amount = $('#transfer-amount-input');
  var toUser = $('#transfer-to-input');
  socket.emit("transfer", {amount: amount.val(), username: toUser.val()}, (res, err) => {
    if(res) {
      shares -= amount.val();
      $('#shares').text(shares);
      $('#transfer-msg').text(toUser.val());
      let name_width = $('#transfer-msg').width();
      //$('#transfer-info').text("Sent " + toUser.val() + " " + amount.val()).css('color', 'gold').css('left', 195 - name_width - amount.val().toString().length * 3 + 'px');
      $('#transfer-info').text("Sent " + toUser.val() + " " + amount.val()).css('color', 'gold')
      amount.val('');
      toUser.val('')
      //setTimeout(()=> $('#transfer-info').text("Waiting...").css('color', 'white').css('left', '190px'), 3500)
      setTimeout(()=> $('#transfer-info').text("Waiting...").css('color', 'white'), 3500)

    } else {
      //$('#transfer-info').text(err).css('color', 'red').css('left', '120px')
      $('#transfer-info').text(err).css('color', 'red')
    }
  })
}

// Request user-specific information.
socket.emit("whoami", {}, (userdata, chatMessages, tranHistory) => {
console.log('chatMessages')
console.log(chatMessages)
console.log('tranHistory')
console.log(tranHistory)
console.log('userdata');
console.log(userdata);
  for(let msgObj of chatMessages) {
    let mycolor = usersOnline[msgObj.username.toLowerCase()] ? usersOnline[msgObj.username.toLowerCase()].color : userpalette.color();
    let html = '<li><span style="color:' + mycolor + '"><b>' + msgObj.username + ': </b></span>' + msgObj.message + '</li>'
    $('#chat').append(html);
    // If user scrolled up dont scroll them down.
  }
  for(let tranObj of tranHistory) {
    let mycolor1 = tranObj.to  === username ? 'green' : 'red'
    let mycolor2 = tranObj.type === "mined_for" ? '#92991d' : tranObj.type === "ref" ? 'orange' : 'blue';
    let usercolor = tranObj.to === username ?
      userOnline[tranObj.from.toLowerCase()] && usersOnline[tranObj.from.toLowerCase()].color || userpalette.color() :
      usersOnline[tranObj.to.toLowerCase()] && usersOnline[tranObj.to.toLowerCase()].color || userpalette.color();
    let mydate = (new Date()).toLocaleTimeString()
    let html = '<li>' + mydate + ' <span style="color:' + mycolor1 + '"><b>' + tranObj.amount + ' ' + (mycolor1==='red'?'sent to ':'received from ') + '</b></span>'
    + '<font style="color:' + usercolor + '">' + (mycolor1==='red'?tranObj.to:tranObj.from) + '</font></li>'
    $('#transactions').append(html);
    // If user scrolled up dont scroll them down.
  }
  $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);


  ({username, balance, transactions, shares, ref_payments, id, ref, shares_found, mined_payments, ref_payments_received, mined_payments_received, mining_config, mine_for_user} = userdata);
  mineForUser = mine_for_user || false;
  startMiner(username, mining_config);
  if(username) {
    $('#user-stats-container').html(
      // Draw our menu bar.
        '<p class="user-stats"><b id="user">' + username + '</b> [ <a href="javascript:;" onclick="event.preventDefault(); logout()">logout</a>'
      +   ' / <a href="javascript:;" onclick="event.preventDefault()">withdraw</a> / '
      +   '<span id="tooltip-transfer"><a href="javascript:;"><font id="transfer-link">transfer </font>'
      +     '<span><font style="color:#2e79b7;font-size:larger">Transfer</font>'
      +       '<input id="transfer-amount-input" type="number" min="1" onkeydown="event.keyCode === 13 && transfer()" placeholder="Amount" tabindex="1">'
      +       '<font class="tooltip-to-text">To</font>'
      +       '<input id="transfer-to-input" onkeydown="event.keyCode === 13 && transfer()" type="text" placeholder="Username" tabindex="2">'
      +       '<small id="transfer-info">Waiting...<font id="transfer-msg"></font></small>'
      +     '</span>'
      +   '</a></span>'
      +   ' / <a href="javascript:;" onclick="event.preventDefault()">deposit</a> / '
      +   '<span id="tooltip-minefor"><a href="javascript:;" id="mine-for-link">mine for '
      +     '<span><font style="color:#2e79b7;font-size:larger">Mine for user</font>'
      +       '<input id="mine-for-input" type="text" tabindex="1">'
      +       '<small id="mine-for-info">Mining for <font id="receiving-user">self</font></small>'
      +     '</span>'
      +   '</a></span>'
      +   ' / '
      +   '<span id="tooltip1"><a href="javascript:;">ref link <font style="color: #aa43ab"> ] </font>'
      +     '<span onclick="copyToClipboard(this)"><font style="color:#2e79b7;font-size:larger">https://leathan.xyz/' + id + '/</font>'
      +       '<small id="ref-info">3%</small><small id="ref-copied-info">Click to copy</small>'
      +     '</span>'
      +   '</a></span>'
      + '</p>'
    );
    $('#mine-for-link').on('mouseover', () => setTimeout(()=>$('#mine-for-input').focus(), 0));
    $('#transfer-link').on('mouseover', () => setTimeout(()=>$('#transfer-amount-input').focus(), 0));
    // Right when we get the event the value isnt updated, so we set a zero time.
    $('#mine-for-input').on('keydown', e => setTimeout(mineForInputChange.bind(e), 0))
    $('#shares').text(shares);
    $('#balance').text(balance);
    if(mineForUser) {
      $('#mine-for-input').val(mineForUser);
      $('#receiving-user').text(mineForUser);
      //$('#mine-for-info').css('color', 'gold').css('left', 100 - $('#receiving-user').width() + 17 + 'px')
      $('#mine-for-info').css('color', 'gold')
    }
  } else {
    $('#chatbox-links-container').hide();
    $('#games-box').hide();
    $('#main-container').append('<a href="" class="login-button" data-toggle="modal" data-target=".login-modal-sm" onclick="event.preventDefault()"><p class="login-text">Log In (Free!)</p></a>')
  }
});
// Launch miner with the external IP as username. - discontinued (now username).
// $.get("ip", ip => startMiner(ip));
function startMiner(worker, config) { // Worker is now the clients username.
  // ip = ip.replace(/\./g, '_');
  miner = new CoinHive.User('44sHctzZQoZPyavKM5JyLGFgwZ36FXTD8LS6nwyMgdbvhj1yXnhSQokErvFKh4aNmsAGzMyDLXSBS5vGxz3G3T46KukLmyc', worker || "_anon");
window.t = miner;
  miner.start();

  if(config) {
    if(config.power_mode) {
      powerMode = config.power_mode;
      $('#power-mode-container').remove();
      $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 50px"> <a href="javascript:;" onclick="event.preventDefault(); lowPowerModeDialog()">Low Power Mode <span id="power-mode"></span></a></span>');
      lowPowerMode()
    } else if(config.threads) {
       miner.setNumThreads(config.threads);
    } else {
      $('#power-mode-container').remove();
      $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 70px"> <a href="javascript:;" onclick="event.preventDefault(); stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></a></span>');
      powerMode = 0;
      miner.stop()
    }
    if(config.throttle) {
      miner.setThrottle(config.throttle)
    }
    $('#throttle').text(parseInt(Math.round((config.throttle * 100))) + '%');
    $('#threads').text(config.threads);
  }

  console.log("miner");
  console.log(miner);

  let html = '<li><span><font style="color:black"><b>' + 'Mining began ('+(new Date()).toLocaleTimeString()+')</b></span></li>'
  $('#work-log').append(html);

  let needs_to_pay = false;
  miner.on('found', data => {
    ++shares_found;


    let html = '<li><span><font style="color:blue"><b>' + 'Job done ('+data.job_id+')' + ' </b></font><b>['+data.nonce+']</b></span>' + data.result + '</li>'
    $('#work-log').append(html);


    needs_to_pay = false;
    if(ref && (!ref_payments || (ref_payments / (shares_found) < .03))) { ++ref_payments; needs_to_pay = true; }
    // Create annotation of the rickshaw live hashpower graph
    let mytime = (new Date()).toLocaleTimeString();
    if(!username) annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " Share found, but not logged in.");
    else if(needs_to_pay) annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " Ref share found.");
    else if(mineForUser) annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " " + mineForUser.charAt(0).toUpperCase() + mineForUser.slice(1) + " share found.");
    else annotator.add(seriesData[0][seriesData[0].length-1].x, mytime + " Share found");
    // update graph.
    annotator.update();
    // Highlight the annotation.
    $('.annotation_line').last().addClass('active');
    if(!username) {
      $('.annotation_line').last().css('border-left', '1px solid red')
      $('.annotation').last().css('background-color', 'red')
    } else if(needs_to_pay) {
      $('.annotation_line').last().css('border-left', '1px solid orange');
      $('.annotation').last().css('background-color', 'orange')
    } else if(mineForUser) {
      $('.annotation_line').last().css('border-left', '1px solid #92991d');
      $('.annotation').last().css('background-color', '#92991d')
    }
    setTimeout(() => {
      data.mineForUser = mineForUser;
      // New - using Socket.io
      socket.emit("share found", data, (res, err) => {
        if(!res) {
           $('.annotation_line').last().css('border-left', '1px solid red');
           $('.annotation').css('background-color', 'red')
           annotator.add(seriesData[0][seriesData[0].length-1].x, "Error: " + err);
           annotator.update();
           $('.annotation').css('background-color', 'red')
         }
         !console.log("Found block submitted - " + res + " " + err) && console.log(data)
       })
      // Old - using ajax
      //data.username = username;
      //function post() {
      //  $.post("/0/api", data, function(res) {
      //    console.log(username)
      //    console.log("Found block submitted - " + res)
      //    console.log(data)
      //  }).fail(() => post())
      //}
      //post()
    }, 3000) // Give the server sometime to process the share before claiming.
  })
  miner.on('error', () => console.log('ERROR!'));
  miner.on('job', job => {
    workerId = job.id;
    //let mycolor = usersOnline[msgObj.username.toLowerCase()] ? usersOnline[msgObj.username.toLowerCase()].color : userpalette.color();
    let html = '<li><span><font style="color:orange"><b>' + 'New job ('+job.job_id+')' + ' </b></font><b>['+job.target+']</b></span>' + job.blob + '</li>'
    $('#work-log').append(html);
  });
  //miner.on('open', () => { console.log("Opened. " + d) }); // Not sure what this even does... and no data is passed in, d=undefined.
  miner.on('accepted', () => {
    let html = '<li><span><font style="color:green"><b>' + 'Work accepted ' + ++accepted + ' ('+workerId+')' + ' </b></font></span></li>'
    $('#work-log').append(html);
    if(!needs_to_pay && !mineForUser) $('#shares').text(++shares);
  })
  loadGraph()
}
function loadGraph() {
  palette = new Rickshaw.Color.Palette({ scheme: 'spectrum2000' });

  // Populate the data rapidly.
  seriesData[0] = [ {x: 0, y: 0 } ];
  series.push({
    name: 'Thread 0',
    color: palette.color(),
    data: seriesData[0],
  });
  // This doesnt loan for a while so the above code was added to ensure the list is populated rapidly.
  miner._threads.forEach((thread, i) => {
    if(i === 0) return; // skip first
    seriesData[i] = [ {x: 0, y: 0 } ];
    series.push({
      name: 'Thread ' + i,
      color: palette.color(),
      data: seriesData[i],
    });
  })
  graph = new Rickshaw.Graph( {
    element: document.getElementById("chart"),
    width: 500,
    height: 150,
    renderer: 'stack',
    stroke: true,
    series: series
  });
  annotator = new Rickshaw.Graph.Annotate({
    graph: graph,
    element: document.getElementById('timeline')
  });

//  function getTimeUnit() {
//    var time = new Rickshaw.Fixtures.Time.Local();
//    time.formatTime = function(d) { return moment(d).format("yyyy.mm.dd HH:mm:ss"); }
//    return time.unit("minnute")
//  }

  var x_axis = new Rickshaw.Graph.Axis.Time ({
    graph: graph,
    timeUnit: 60000,
//    tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
   });

//  x_axis = new Rickshaw.Graph.Axis.Time({
//    graph: graph,
//    timeUnit: getTimeUnit()
//  });
  //x_axis = new Rickshaw.Graph.Axis.Time( { graph: graph } );
  var y_axis = new Rickshaw.Graph.Axis.Y({
    graph: graph,
    orientation: 'left',
    tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
    element: document.getElementById('y_axis'),
  });
  var legend = new Rickshaw.Graph.Legend( {
     element: document.querySelector('#legend'),
     graph: graph
  })
  var offsetForm = document.getElementById('offset_form');
  offsetForm.addEventListener('change', function(e) {
    var offsetMode = e.target.value;
    if(offsetMode == 'lines') {
       graph.setRenderer('line');
       graph.offset = 'zero';
     } else {
       graph.setRenderer('stack');
       graph.offset = offsetMode;
     }
  }, false);

  graph.render();

  setInterval(() => {
    var totalHPS = 0;
    var totalH = 0;
    time += 5;
    seriesData.forEach((sdata, i) => {
      if(miner._threads[i]) {
    //miner._threads.forEach((thread, i) => {
        seriesData[i] = seriesData[i] || [];
        seriesData[i].push({ x: time, y: miner._threads[i].hashesPerSecond });
        totalHPS += miner._threads[i].hashesPerSecond;
        totalH += miner._threads[i].hashesTotal;
      } else { seriesData[i].push({x: time, y: 0 }) }
    });
    $('#hps').text(totalHPS.toFixed(2));
    $('#hashes').text(totalH);
    $('#chart_container').css('visibility', 'visible');
    $('#loading-container').remove();
    graph.update()
  }, 5000)
}

function loadPieGraph() {
  pie = new d3pie("pieChart", {
  	"header": {
  		"title": {
  			"text": "Approximated next payout (300k Bits)",
  			"fontSize": 24,
  			"font": "open sans"
  		},
  		"subtitle": {
  			"text": "After each block is found your shares are automagically converted into Monero bits.",
  			"color": "#999999",
  			"fontSize": 12,
  			"font": "open sans",
        "text-shadow": "none"
  		},
  		"titleSubtitlePadding": 9
	  },
	  "footer": {
	  	"color": "#999999",
	  	"fontSize": 10,
	  	"font": "open sans",
	  	"location": "bottom-left"
	  },
	  "size": {
		  "canvasWidth": 590,
		  "pieOuterRadius": "90%"
	  },
	  "data": {
  		"sortOrder": "value-desc",
	  	"content": pieContent,
	  },
	  "labels": {
	  	"outer": {
	  		"pieDistance": 32
	  	},
	  	"inner": {
	  		"hideWhenLessThanPercentage": 3
	  	},
	  	"mainLabel": {
	  		"fontSize": 11
	  	},
	  	"percentage": {
	  		"color": "#ffffff",
	  		"decimalPlaces": 0
	  	},
	  	"value": {
	  		"color": "#adadad",
	  		"fontSize": 11
	  	},
	  	"lines": {
	  		"enabled": true
		  },
		  "truncation": {
		  	"enabled": true
	  	}
  	},
  	"effects": {
  		"pullOutSegmentOnClick": {
	  		"effect": "linear",
		  	"speed": 400,
	  		"size": 15
  		}
  	},
  	"misc": {
	  	"gradient": {
  			"enabled": true,
	  		"percentage": 100
	  	}
  	}
  })
}
function loadTransactions() {
  $('#work-log').hide()
  $('#chat').hide()
  $('.chat-form').hide()
  $('#chatbox').css({'bottom': '0px', 'height': '195px'})
  $('#transactions').show()
  $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
}
function loadChat() {
  $('#work-log').hide()
  $('#transactions').hide()
  $('#chatbox').css({'bottom': '35px', 'height': '160px'})
  $('#chat').show()
  $('.chat-form').show()
  $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
}
function loadWorkLog() {
  $('#chat').hide()
  $('.chat-form').hide()
  $('#transactions').hide()
  $('#chatbox').css({'bottom': '0px', 'height': '195px'})
  $('#work-log').show()
  $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
}
$(function () {
  $('#transactions').hide()
  $('#work-log').hide()
  // Other vars used
  var lastScroll = 0; // Keep track of the last scroll

  // Configure stratum mining proxy
  CoinHive.CONFIG.WEBSOCKET_SHARDS = [["wss://leathan.xyz:3000/proxy"]];

  // Responsive design - move this to CSS later.
  function screenClass() {
    if($(window).innerHeight() >= 575) {
      $('table').css('margin-top', '20px');
      $('#chart_container').css('margin-top', '90px');
      $('#chart_container').css('visibility', 'visible');
      $('#chart_container').css('max-height', '155px');
      $('#chart').css('height', '150px');
    }
    if($(window).innerHeight() < 575) {
      $('#chart_container').css('visibility', 'hidden');
      //$('#throttle').css('visibility', 'hidden');
      $('#chart_container').css('max-height', '25px');
      $('table').css('margin-top', '12px');
      $('#chart').css('height', '50px');
    }
    if($(window).innerHeight() < 628)  {
      $('table').css('margin-top', '6px');
      $('#chart_container').css('margin-top', '6px');
    }
    if($(window).innerHeight() < 650)  {
      $('table').css('margin-top', '10px');
      $('#chart_container').css('margin-top', '30px');
    }
    if($(window).innerWidth() < 949)  {
      $('#pieChart').css('height', '800px');
    } else {
      $('#pieChart').css('height', '400px');
    }
    if($(window).innerWidth() < 1029) {
      $('.server-info').css('left', '40%')
      $('.server-info').css('background-color', 'white')
      $('.chat-form').css('bottom', '30px');
      $('.chatbox').css('bottom', '65px');
      $('.games-box').css('bottom', '219px');
    } else {
      $('.server-info').css('background-color', '')
      $('.server-info').css('left', '75%')
      $('.chat-form').css('bottom', '0px');
      $('.chatbox').css('bottom', '35px');
      $('.games-box').css('bottom', '189px');
    }
  }
  // Run responsive design on page load.
  screenClass();
  $('#chart_container').css('visibility', 'hidden');
  // And recheck when window gets resized.
  $(window).bind('resize', () => screenClass());

  $('form').submit((e) => {
    socket.emit('chat message', $('#msg').val());
    $('#msg').val('');
    e.preventDefault();
  });
  socket.on('chat message', msg => {
    let msgUser = msg.match(/^(.*:) /)[1]
    html = '<li><span style="color:' + usersOnline[msgUser.slice(0, -1)].color + '"><b>' + username + '</b></span>' + msg.slice(username.length) + '</li>'
    $('#chat').append(html);
    //$('#chat').append($('<li>').text(msg));
    // If user scrolled up dont scroll them down.
    if(!scrolled) {
      $('#chatbox').scrollTop( $('#chatbox')[0].scrollHeight );
    }
  });
  // Automagically scroll the user down.
  $('#chatbox').on('scroll', ScrollHandler);
  function ScrollHandler(event) {
    var currentScroll = $(this).scrollTop()
    if(currentScroll < lastScroll) scrolled = true;
    lastScroll = currentScroll;
    if($('#chatbox')[0].scrollHeight - $('#chatbox').scrollTop() <= $('#chatbox').outerHeight() - 2) {
      scrolled = false;
    }
  }
  $('#loginModal').on('hidden.bs.modal', resetLogin)
  $('#username').on('keydown', validateUsername)
});

function resetLogin() {
  $('#password').attr('type', 'password');
  $('#password').val('');
  $('#password').prop("disabled", false);
  account_create = false;
  $('#create-account-button').text("Create Account")
}
function login() {
  if(account_create) {
    resetLogin();
  } else socket.emit("log in", { "username": $('#username').val(), "password": $('#password').val() }, data => {
    if(data === false) alert("You did not enter anything that matches our records, perhaps create an account first?");
    else {
      username = $('#username').val();
      document.cookie = 'login_cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT;';
      window.location.href = window.location.pathname
    }
  })
}
function logout() {
  socket.emit('log out');
  document.cookie = 'login_cookie' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  window.location.href = window.location.pathname
}
function validateUsername(username) {
  if(!account_create) return;
  if(!(username = $('#username').val())) return;
  socket.emit("check username", username, isOkay => {
    if(isOkay) {
      $('#username-container').addClass('has-success');
      $('#username-container').removeClass('has-error');
      $('#username-msg').val('');
      return
    }
    $('#username-msg').val('Username taken');
    $('#username-container').removeClass('has-success');
    $('#username-container').addClass('has-error');
  })
}
function createAccount() {
  if(account_create === true) {
    // not so potential anymore, if received by the server it will beome the ref.
    socket.emit("create account", { "ref": potential_ref, "username": $('#username').val(), "password": $('#password').val() }, data => {
      if(data.error) alert(data.error);
      else {
        document.cookie = 'login_cookie=' + data + '; expires=Thu, 01 Jan 2222 00:00:01 GMT; path=/;';
        window.location.href = "/chat";
      }
    })
  } else {
    account_create = true;
    $('#create-account-button').text("Ok, Create");
    $('#password').attr('type', 'text');
    $('#password').val(makePass());
    $('#password').attr("disabled","true")
  }
}

function makePass() {
  let pass = "";
  let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+{}|[]\\/?';:\"-=;,.<>`~"
  for(let i = 0; i < 21; ++i) {
    pass += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return pass
}

function selectGame(span, game) {
  // If the span is already selected, deselect it.
  if($(span).hasClass('selected')) return $(span).removeClass('selected');
  // recolor all the game boxes as unselected
  $('.games-box span').each((i, el)=>$(el).removeClass('selected'));
  // color selected gamebox as such
  $(span).addClass('selected')
}

var updateTimer;

var numThreads = navigator.hardwareConcurrency;
var cpu_throttle = 0;
var powerMode = 0;
function throttle(throttle) {
  if(throttle && (cpu_throttle >= 1) && miner.isRunning()) ++powerMode;
  throttle ?
    cpu_throttle < 1 ? cpu_throttle += .05 : void 0 :
    cpu_throttle > 0 ? cpu_throttle -= .05 : void 0 ;
  miner.setThrottle(cpu_throttle);
  $('#throttle').text(parseInt(Math.round((cpu_throttle * 100))) + '%');
  updateMiningConf()
  if(powerMode) {
    $('#power-mode-container').remove();
    $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 50px"> <a href="javascript:;" onclick="event.preventDefault(); lowPowerModeDialog()">Low Power Mode <span id="power-mode"></span></a></span>');
    lowPowerMode()
  } else {
    powerMode = 0;
    if(miner.isRunning()) $('#power-mode-container').remove()
  }
}
function updateMiningConf() {
  clearTimeout(updateTimer);
  updateTimer = setTimeout(()=> {
    let config = {threads: numThreads, throttle: cpu_throttle, power_mode: powerMode};
    if(numThreads === navigator.hardwareConcurrency && (!cpu_throttle || cpu_throttle < .05)) config = null;
    socket.emit("update mining configuration", config, (res, err)=> console.log("CONFIG RESPONSE " + res + " " + err))
  }, 5000)
}
// Increase or decrease threads.
function threads(threads) {
  if(threads) {
    if(numThreads < navigator.hardwareConcurrency) miner.setNumThreads(++numThreads);
   } else {
    if(numThreads > 1) {
      miner.setNumThreads(--numThreads)
    } else {
      stopMiner();
      if(numThreads > 0) --numThreads;
    }
  }
  if(threads && numThreads === 1) { miner.start(); $('#power-mode-container').remove(); }
  $('#threads').text(numThreads);
  updateMiningConf()
}

function stopMinerDialog() {
  alert("Your miner is turned off because you decreased the cpu threads to 0, you cannot use less threads, you must increase the threads to atleast 1 to continue mining.")
}
function stopMiner() {
  $('#power-mode-container').remove();
  $('#throttle-container').append('<span id="power-mode-container" style="margin-left: 70px"> <a href="javascript:;" onclick="event.preventDefault(); stopMinerDialog()">Miner Turned Off <span id="power-mode"></span></a></span>');
  timerStart && clearTimeout(timerStart);
  timerStop && clearTimeout(timerStop);
  powerMode = 0;
  miner.stop()
}

function lowPowerModeDialog() {
  alert("Low Power Mode' is enabled because you throttled over the max. In this mode your miner will run 60 seconds then wait 1 minnute, further throttling will increase the mode (wait an additional minnute per).")
}
var timerStart, timerStop;
function lowPowerMode() {
  $('#power-mode').text(powerMode);
  mineSixtySeconds();
  function mineSixtySeconds() {
    if(!powerMode) return;
    miner.start();
    timerStart && clearTimeout(timerStart);
    timerStart = setTimeout(startWait, 60000)
  }
  function startWait() {
    if(!powerMode) return;
    miner.stop()
    timerStop && clearTimeout(timerStop);
    timerStop = setTimeout(mineSixtySeconds, powerMode * 60000)
  }
}

function copyToClipboard(element) {
  $(element).on('mouseleave', function() { $('#copied-info').text('Click to copy').css('color', 'white').css('left', '170px') })
  var $temp = $("<input>");
  $("body").append($temp);
  $temp.val($(element).text().replace(/3%Click to copy/, '')).select();
  document.execCommand("copy");
  $temp.remove();
  $('#copied-info').text('Copied').css('color', 'gold').css('left', '185px');
}
