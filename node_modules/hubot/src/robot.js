(function() {
  var Brain, CatchAllMessage, EnterMessage, EventEmitter, Fs, DEFAULT_ADAPTERS, DOC_SECTIONS, HttpClient, ref,
      LeaveMessage, Listener, Log, Middleware, Path, Response, Robot, TextListener, TopicMessage, User, async,
      indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
      hasProp = {}.hasOwnProperty;

  Fs = require('fs');
  Log = require('log');
  Path = require('path');
  HttpClient = require('scoped-http-client');
  { EventEmitter } = require('events');
  async = require('async');
  User = require('./user');
  Brain = require('./brain');
  Response = require('./response');
  { Listener, TextListener } = require('./listener');
  { EnterMessage, LeaveMessage, TopicMessage, CatchAllMessage } = require('./message');
  Middleware = require('./middleware');

  DEFAULT_ADAPTERS = ['campfire', 'shell'];

  DOC_SECTIONS = ['description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'authors', 'examples', 'tags', 'urls'];

  //Robot = (function() {
    function Robot(adapterPath, adapter, httpd, name, alias) {
      if (name == null) {
        name = 'Mubot';
      if (alias == null) {
        alias = false;
      }
      if (this.adapterPath == null) {
        this.adapterPath = Path.join(__dirname, "adapters");
      }
      this.name = name;
      this.events = new EventEmitter;
      this.brain = new Brain(this);
      this.alias = alias;
      this.adapter = null;
      this.io = null;
      this.Response = Response;
      this.commands = [];
      this.listeners = [];
      this.middleware = {
        listener: new Middleware(this),
        response: new Middleware(this),
        receive: new Middleware(this)
      };
      this.logger = new Log(process.env.HUBOT_LOG_LEVEL || 'info');
      this.pingIntervalId = null;
      this.globalHttpOptions = {};
      this.parseVersion();
      if (httpd) {
        this.setupExpress();
      } else {
        this.setupNullRouter();
      }
      this.loadAdapter(adapter);
      this.adapterName = adapter;
      this.errorHandlers = [];
      this.on('error', (function(_this) {
        return function(err, res) {
          return _this.invokeErrorHandlers(err, res);
        };
      })(this));
      this.onUncaughtException = (function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this);
      process.on('uncaughtException', this.onUncaughtException);
    }

    Robot.prototype.listen = function(matcher, options, callback) {
      return this.listeners.push(new Listener(this, matcher, options, callback));
    };

    Robot.prototype.hear = function(regex, options, callback) {
      return this.listeners.push(new TextListener(this, regex, options, callback));
    };

    Robot.prototype.respond = function(regex, options, callback) {
      return this.hear(this.respondPattern(regex), options, callback);
    };

    Robot.prototype.respondPattern = function(regex) {
      var alias, modifiers, name, newRegex, pattern, reArray;
      reArray = regex.toString().split('/');
      reArray.shift();
      modifiers = reArray.pop();
      pattern = reArray[0];
      if (/^\^/.test(pattern)) {
        this.logger.warning("Anchors don't work well with respond, use 'hear': " + regex.toString())
      }
      name = this.name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
      if (this.alias) {
        alias = this.alias.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        newRegex = new RegExp("^\\s*[@]?(?:" + alias + "[:,]?|" + name + "[:,]?)\\s*(?:" + pattern + ")", modifiers);
      } else {
        newRegex = new RegExp("^\\s*[@]?" + name + "[:,]?\\s*(?:" + pattern + ")", modifiers);
      }
      return newRegex;
    };

    Robot.prototype.enter = function(options, callback) {
      return this.listen((function(msg) {
        return msg instanceof EnterMessage;
      }), options, callback);
    };

    Robot.prototype.leave = function(options, callback) {
      return this.listen((function(msg) {
        return msg instanceof LeaveMessage;
      }), options, callback);
    };

    Robot.prototype.topic = function(options, callback) {
      return this.listen((function(msg) {
        return msg instanceof TopicMessage;
      }), options, callback);
    };

    Robot.prototype.error = function(callback) {
      return this.errorHandlers.push(callback);
    };

    Robot.prototype.invokeErrorHandlers = function(err, res) {
      var errErr, errorHandler, i, len, ref2, results;
      this.logger.error(err.stack);
      ref2 = this.errorHandlers;
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        errorHandler = ref2[i];
        try {
          results.push(errorHandler(err, res));
        } catch (error1) {
          errErr = error1;
          results.push(this.logger.error("while invoking error handler: " + errErr + "\n" + errErr.stack));
        }
      }
      return results;
    };

    Robot.prototype.catchAll = function(options, callback) {
      if (callback == null) {
        callback = options;
        options = {};
      }
      return this.listen((function(msg) {
        return msg instanceof CatchAllMessage;
      }), options, (function(msg) {
        msg.message = msg.message.message;
        return callback(msg);
      }));
    };

    Robot.prototype.listenerMiddleware = function(middleware) {
      this.middleware.listener.register(middleware);
    };

    Robot.prototype.responseMiddleware = function(middleware) {
      this.middleware.response.register(middleware);
    };

    Robot.prototype.receiveMiddleware = function(middleware) {
      this.middleware.receive.register(middleware);
    };

    Robot.prototype.receive = function(message, cb) {
     this.middleware.receive.execute({ response: new Response(this, message) }, this.processListeners.bind(this), cb);
    };

    Robot.prototype.processListeners = function(context, done) {
      var anyListenersExecuted;
      anyListenersExecuted = false;
      async.detectSeries(this.listeners, (function(_this) {
        return function(listener, cb) {
          var err;
          try {
            return listener.call(context.response.message, _this.middleware.listener, function(listenerExecuted) {
              anyListenersExecuted = anyListenersExecuted || listenerExecuted;
              return Middleware.ticker(function() {
                return cb(context.response.message.done);
              });
            });
          } catch (error1) {
            err = error1;
            _this.emit('error', err, new _this.Response(_this, context.response.message, []));
            return cb(false);
          }
        };
      })(this), (function(_this) {
        return function(_) {
          if (!(context.response.message instanceof CatchAllMessage) && !anyListenersExecuted) {
            _this.logger.debug('No listeners executed; falling back to catch-all');
            return _this.receive(new CatchAllMessage(context.response.message), done);
          } else {
            if (done != null) {
              return process.nextTick(done);
            }
          }
        };
      })(this));
      return void 0;
    };

    Robot.prototype.loadFile = function(path, file) {
      var cacheobj, error, ext, full, script;
      ext = Path.extname(file);
      full = Path.join(path, Path.basename(file, ext));
      if (require.cache[require.resolve(full)]) {
        try {
          cacheobj = require.resolve(full);
          this.logger.debug("require cache for " + cacheobj + " invalidated.");
          delete require.cache[cacheobj];
        } catch (error1) {
          error = error1;
          this.logger.error("Unable to invalidate " + cacheobj + ": " + error.stack);
        }
      }
      if (require.extensions[ext]) {
        try {
          script = require(full);
          if (typeof script === 'function') {
            script(this);
            return this.parseHelp(Path.join(path, file));
          } else {
            return this.logger.warning("Expected " + full + " to assign a function to module.exports, got " + (typeof script));
          }
        } catch (error1) {
          error = error1;
          this.logger.error("Unable to load " + full + ": " + error.stack);
          return process.exit(1);
        }
      }
    };

    Robot.prototype.load = function(path) {
      var file, i, len, ref2, results;
      this.logger.debug("Loading scripts from " + path);
      if (Fs.existsSync(path)) {
        ref2 = Fs.readdirSync(path).sort();
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          file = ref2[i];
          results.push(this.loadFile(path, file));
        }
        return results;
      }
    };

    Robot.prototype.loadHubotScripts = function(path, scripts) {
      var i, len, results, script;
      this.logger.debug("Loading hubot-scripts from " + path);
      results = [];
      for (i = 0, len = scripts.length; i < len; i++) {
        script = scripts[i];
        results.push(this.loadFile(path, script));
      }
      return results;
    };

    Robot.prototype.loadExternalScripts = function(packages) {
      var err, i, len, pkg, results, results1, scripts;
      this.logger.debug("Loading external-scripts from npm packages");
      try {
        if (packages instanceof Array) {
          results = [];
          for (i = 0, len = packages.length; i < len; i++) {
            pkg = packages[i];
            results.push(require(pkg)(this));
          }
          return results;
        } else {
          results1 = [];
          for (pkg in packages) {
            scripts = packages[pkg];
            results1.push(require(pkg)(this, scripts));
          }
          return results1;
        }
      } catch (error1) {
        err = error1;
        this.logger.error("Error loading scripts from npm package - " + err.stack);
        return process.exit(1);
      }
    };

    Robot.prototype.setupExpress = function() {
      var secret, address, parseurl, session, app, basicAuth, bodyParser, cookieParser, express, fs, http, https, logger, multipart, options, pass, port, stat, user, socketUsers;
      user          = process.env.EXPRESS_USER;
      pass          = process.env.EXPRESS_PASSWORD;
      stat          = process.env.EXPRESS_STATIC;
      secret        = process.env.EXPRESS_SECRET || 'loyalty is to be placed, and unplaced, but never replaced';
      port          = process.env.EXPRESS_PORT || process.env.PORT || 8080;
      sPort         = process.env.EXPRESS_SECURE_PORT || process.env.SECURE_PORT || 4343;
      address       = process.env.EXPRESS_BIND_ADDRESS || process.env.BIND_ADDRESS || '0.0.0.0';
      express       = require('express');
      multipart     = require('connect-multiparty');
      bodyParser    = require('body-parser');
      basicAuth     = require('basic-auth-connect');
      cookieParser  = require('cookie-parser');
      logger        = require('morgan');
      app           = express();
      parseurl      = require('parseurl')
      session       = require('express-session')

      app.use(session({
        secret: secret,
        resave: false,
        saveUninitialized: true
      }))

      app.use((req, res, next) => {
        var views, path;
        res.setHeader("X-Powered-By", "Mubotv0.1.0 / " + this.name);
        views = req.session.views
        if (!views) views = req.session.views = {}
        path = parseurl(req).pathname
        views[path] = (views[path] || 0) + 1
        next()
      })
      app.get('/debug', function (req, res, next) {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.write('you viewed this page ' + req.session.views['/debug'] + ' times.\n')
        res.write('Echo service: ' + req.url + '\n' + JSON.stringify(req.headers, true, 2));
        req.pipe(res);
        res.end();
      })
      if(process.env.HUBOT_LOG_LEVEL) app.use(logger("dev"));
      if (user && pass)               app.use("/admin", basicAuth(user, pass));
      if (stat)                       app.use(express.static(stat));
      app.use(bodyParser.json         ({ extended: true }));
      app.use(bodyParser.urlencoded   ({ extended: false }));
      app.use(express.query());
      app.use(cookieParser());

      https   = require('https');
      http    = require('http');
      options = {
        key: Fs.readFileSync (Path.join(__dirname, '../../hubot-server/credentials/privkey.pem')),
        cert: Fs.readFileSync(Path.join(__dirname, '../../hubot-server/credentials/fullchain.pem')),
        ca: Fs.readFileSync  (Path.join(__dirname, '../../hubot-server/credentials/chain.pem'))
      };
      this.server = https.createServer(options, app).listen(sPort, function() {
        return console.log('listening on port 4343.');
      }).on('error', e => {
        if(e.code == "EADDRINUSE") console.log("cant listen on port 4343, address is use.")
      })

     this.io = require('socket.io')(this.server);

      http.createServer((req, res) => {
        res.writeHead(301, { 'Location': 'https://' + req.headers['host'] + req.url });
        return res.end();
      }).listen(port, function() {
        return console.log('listening on port 8080.');
      }).on('error', e => {
        if(e.code == "EADDRINUSE") console.log("cant listen on port 8000, address is use.")
      })
      return this.router = app;
    };

    Robot.prototype.setupNullRouter = function() {
      var msg = "A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.";
      return this.router = {
        get: (function(_this) {
          return function() {
            return _this.logger.warning(msg);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.logger.warning(msg);
          };
        })(this),
        put: (function(_this) {
          return function() {
            return _this.logger.warning(msg);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this.logger.warning(msg);
          };
        })(this)
      };
    };

    Robot.prototype.loadAdapter = function(adapter) {
      var err, path;
      this.logger.debug("Loading adapter " + adapter);
      try {
        path = indexOf.call(DEFAULT_ADAPTERS, adapter) >= 0 ? this.adapterPath + "/" + adapter : "hubot-" + adapter;
        return this.adapter = require(path).use(this);
      } catch (error1) {
        err = error1;
        this.logger.error("Cannot load adapter " + adapter + " - " + err);
        return process.exit(1);
      }
    };

    Robot.prototype.helpCommands = function() {
      return this.commands.sort();
    };

    Robot.prototype.parseHelp = function(path) {
      var body, cleanedLine, currentSection, line, nextSection, lines, results, scriptDocumentation, scriptName;
      this.logger.debug("Parsing help for " + path);
      scriptName = Path.basename(path).replace(/\.(coffee|js)$/, '');
      scriptDocumentation = {};
      body = Fs.readFileSync(path, 'utf-8');
      currentSection = null;
      lines = body.split("\n");
      for (let i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        if(!/(#|\/\/)/.test(line)) break;
        cleanedLine = line.replace(/^(#|\/\/)\s?/, "").trim();
        if (cleanedLine.length === 0) continue;
        if (cleanedLine.toLowerCase() === 'none') continue;
        nextSection = cleanedLine.toLowerCase().replace(':', '');
        if (DOC_SECTIONS.includes(nextSection)) {
          currentSection = nextSection;
          scriptDocumentation[currentSection] = [];
        } else if (currentSection) {
          scriptDocumentation[currentSection].push(cleanedLine.trim());
          if (currentSection === 'commands') {
            this.commands.push(cleanedLine.trim());
          }
        }
      }
      if (currentSection === null) {
        this.logger.info(path + " is using deprecated documentation syntax");
        scriptDocumentation.commands = [];
        lines = body.split("\n");
        results = [];
        for (let i = 0, l = lines.length; i < l; i++) {
          line = lines[i];
          if(!/(#|\/\/)/.test(line)) break;
          if(!/-/.test(line)) continue;
          cleanedLine = line.slice(2, line.length).replace(/^(hubot|mubot)/i, this.name).trim();
          scriptDocumentation.commands.push(cleanedLine);
          results.push(this.commands.push(cleanedLine));
        }
        return results;
      }
    };

    Robot.prototype.send = function(envelope) {
      const strings = [].slice.call(arguments, 1)
      this.adapter.send.apply(this, [envelope].concat(strings))
    };

    Robot.prototype.reply = function(envelope) {
      const strings = [].slice.call(arguments, 1)
      this.adapter.reply.apply(this, [envelope].concat(strings))
    };

    Robot.prototype.messageRoom = function(room) {
      const strings = [].slice.call(arguments, 1)
      const envelope = { room }
      this.adapter.send.apply(this, [envelope].concat(strings))
    };

    Robot.prototype.on = function(event) {
      const args = [].slice.call(arguments, 1)
      this.events.on.apply(this, [event].concat(args))
    };

    Robot.prototype.emit = function(event) {
      const args = [].slice.call(arguments, 1)
      this.events.emit.apply(this, [event].concat(args))
    };

    Robot.prototype.run = function() {
      this.emit("running");
      this.adapter.run();
    };

    Robot.prototype.shutdown = function() {
      if (this.pingIntervalId) clearInterval(this.pingIntervalId);
      process.removeListener('uncaughtException', this.onUncaughtException);
      this.adapter.close();
      this.brain.close();
    };

    Robot.prototype.parseVersion = function() {
      const pkg = require(Path.join(__dirname, '..', 'package.json'));
      return this.version = pkg.version;
    };

    Robot.prototype.http = function(url, options) {
      return HttpClient.create(url, this.extend({}, this.globalHttpOptions, options)).header('User-Agent', "Mubot/" + this.version);
    };

    Robot.prototype.extend = function(obj) {
      const sources = [].slice.call(arguments, 1);
      for (let i = 0, l = sources.length; i < l; i++) {
        let source = sources[i];
        for (let key in source) {
          if (!hasProp.call(source, key)) continue;
          obj[key] = source[key];
        }
      }
      return obj;
    };

 //   return Robot;

 // })();

  module.exports = Robot;

}).call(this);
